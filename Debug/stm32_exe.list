
stm32_exe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000227c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024bc  080024bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080024bc  080024bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024bc  080024bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002534  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002534  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034db  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001072  00000000  00000000  00023573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  000245e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  00024aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143cf  00000000  00000000  00024eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b38  00000000  00000000  0003927f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aa80  00000000  00000000  0003edb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f8  00000000  00000000  000b9888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800231c 	.word	0x0800231c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	0800231c 	.word	0x0800231c

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_lmul>:
 800022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800022e:	46ce      	mov	lr, r9
 8000230:	4647      	mov	r7, r8
 8000232:	b580      	push	{r7, lr}
 8000234:	0007      	movs	r7, r0
 8000236:	4699      	mov	r9, r3
 8000238:	0c3b      	lsrs	r3, r7, #16
 800023a:	469c      	mov	ip, r3
 800023c:	0413      	lsls	r3, r2, #16
 800023e:	0c1b      	lsrs	r3, r3, #16
 8000240:	001d      	movs	r5, r3
 8000242:	000e      	movs	r6, r1
 8000244:	4661      	mov	r1, ip
 8000246:	0400      	lsls	r0, r0, #16
 8000248:	0c14      	lsrs	r4, r2, #16
 800024a:	0c00      	lsrs	r0, r0, #16
 800024c:	4345      	muls	r5, r0
 800024e:	434b      	muls	r3, r1
 8000250:	4360      	muls	r0, r4
 8000252:	4361      	muls	r1, r4
 8000254:	18c0      	adds	r0, r0, r3
 8000256:	0c2c      	lsrs	r4, r5, #16
 8000258:	1820      	adds	r0, r4, r0
 800025a:	468c      	mov	ip, r1
 800025c:	4283      	cmp	r3, r0
 800025e:	d903      	bls.n	8000268 <__aeabi_lmul+0x3c>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	025b      	lsls	r3, r3, #9
 8000264:	4698      	mov	r8, r3
 8000266:	44c4      	add	ip, r8
 8000268:	4649      	mov	r1, r9
 800026a:	4379      	muls	r1, r7
 800026c:	4372      	muls	r2, r6
 800026e:	0c03      	lsrs	r3, r0, #16
 8000270:	4463      	add	r3, ip
 8000272:	042d      	lsls	r5, r5, #16
 8000274:	0c2d      	lsrs	r5, r5, #16
 8000276:	18c9      	adds	r1, r1, r3
 8000278:	0400      	lsls	r0, r0, #16
 800027a:	1940      	adds	r0, r0, r5
 800027c:	1889      	adds	r1, r1, r2
 800027e:	bcc0      	pop	{r6, r7}
 8000280:	46b9      	mov	r9, r7
 8000282:	46b0      	mov	r8, r6
 8000284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 f97a 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f803 	bl	800029a <SystemClock_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rand();
 8000294:	f000 ffbc 	bl	8001210 <rand>
 8000298:	e7fc      	b.n	8000294 <main+0xc>

0800029a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029a:	b590      	push	{r4, r7, lr}
 800029c:	b093      	sub	sp, #76	; 0x4c
 800029e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a0:	2414      	movs	r4, #20
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	0018      	movs	r0, r3
 80002a6:	2334      	movs	r3, #52	; 0x34
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f000 ffa8 	bl	8001200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2310      	movs	r3, #16
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f000 ffa1 	bl	8001200 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002be:	2380      	movs	r3, #128	; 0x80
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fa98 	bl	80007f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2202      	movs	r2, #2
 80002cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	0052      	lsls	r2, r2, #1
 80002d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d6:	193b      	adds	r3, r7, r4
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2240      	movs	r2, #64	; 0x40
 80002e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2200      	movs	r2, #0
 80002e6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fac4 	bl	8000878 <HAL_RCC_OscConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002f4:	f000 f819 	bl	800032a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2207      	movs	r2, #7
 80002fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2100      	movs	r1, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fdbf 	bl	8000e98 <HAL_RCC_ClockConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800031e:	f000 f804 	bl	800032a <Error_Handler>
  }
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b013      	add	sp, #76	; 0x4c
 8000328:	bd90      	pop	{r4, r7, pc}

0800032a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032e:	b672      	cpsid	i
}
 8000330:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000332:	e7fe      	b.n	8000332 <Error_Handler+0x8>

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <HAL_MspInit+0x44>)
 800033c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <HAL_MspInit+0x44>)
 8000340:	2101      	movs	r1, #1
 8000342:	430a      	orrs	r2, r1
 8000344:	641a      	str	r2, [r3, #64]	; 0x40
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <HAL_MspInit+0x44>)
 8000348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034a:	2201      	movs	r2, #1
 800034c:	4013      	ands	r3, r2
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <HAL_MspInit+0x44>)
 8000354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <HAL_MspInit+0x44>)
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	0549      	lsls	r1, r1, #21
 800035c:	430a      	orrs	r2, r1
 800035e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <HAL_MspInit+0x44>)
 8000362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000364:	2380      	movs	r3, #128	; 0x80
 8000366:	055b      	lsls	r3, r3, #21
 8000368:	4013      	ands	r3, r2
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	46bd      	mov	sp, r7
 8000372:	b002      	add	sp, #8
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	40021000 	.word	0x40021000

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <NMI_Handler+0x4>

08000382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000386:	e7fe      	b.n	8000386 <HardFault_Handler+0x4>

08000388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a0:	f000 f95a 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
	return 1;
 80003ae:	2301      	movs	r3, #1
}
 80003b0:	0018      	movs	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_kill>:

int _kill(int pid, int sig)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b082      	sub	sp, #8
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80003c0:	f000 fef4 	bl	80011ac <__errno>
 80003c4:	0003      	movs	r3, r0
 80003c6:	2216      	movs	r2, #22
 80003c8:	601a      	str	r2, [r3, #0]
	return -1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	425b      	negs	r3, r3
}
 80003ce:	0018      	movs	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b002      	add	sp, #8
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_exit>:

void _exit (int status)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80003de:	2301      	movs	r3, #1
 80003e0:	425a      	negs	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	0011      	movs	r1, r2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f7ff ffe5 	bl	80003b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80003ec:	e7fe      	b.n	80003ec <_exit+0x16>

080003ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b086      	sub	sp, #24
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	e00a      	b.n	8000416 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000400:	e000      	b.n	8000404 <_read+0x16>
 8000402:	bf00      	nop
 8000404:	0001      	movs	r1, r0
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	60ba      	str	r2, [r7, #8]
 800040c:	b2ca      	uxtb	r2, r1
 800040e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	3301      	adds	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	dbf0      	blt.n	8000400 <_read+0x12>
	}

return len;
 800041e:	687b      	ldr	r3, [r7, #4]
}
 8000420:	0018      	movs	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	b006      	add	sp, #24
 8000426:	bd80      	pop	{r7, pc}

08000428 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	e009      	b.n	800044e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	60ba      	str	r2, [r7, #8]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	0018      	movs	r0, r3
 8000444:	e000      	b.n	8000448 <_write+0x20>
 8000446:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	3301      	adds	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	429a      	cmp	r2, r3
 8000454:	dbf1      	blt.n	800043a <_write+0x12>
	}
	return len;
 8000456:	687b      	ldr	r3, [r7, #4]
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b006      	add	sp, #24
 800045e:	bd80      	pop	{r7, pc}

08000460 <_close>:

int _close(int file)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	return -1;
 8000468:	2301      	movs	r3, #1
 800046a:	425b      	negs	r3, r3
}
 800046c:	0018      	movs	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bd80      	pop	{r7, pc}

08000474 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0192      	lsls	r2, r2, #6
 8000484:	605a      	str	r2, [r3, #4]
	return 0;
 8000486:	2300      	movs	r3, #0
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b002      	add	sp, #8
 800048e:	bd80      	pop	{r7, pc}

08000490 <_isatty>:

int _isatty(int file)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	return 1;
 8000498:	2301      	movs	r3, #1
}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b084      	sub	sp, #16
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
	return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <_sbrk+0x5c>)
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <_sbrk+0x60>)
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <_sbrk+0x64>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <_sbrk+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	18d3      	adds	r3, r2, r3
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d207      	bcs.n	80004f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e8:	f000 fe60 	bl	80011ac <__errno>
 80004ec:	0003      	movs	r3, r0
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	425b      	negs	r3, r3
 80004f6:	e009      	b.n	800050c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	18d2      	adds	r2, r2, r3
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <_sbrk+0x64>)
 8000508:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b006      	add	sp, #24
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20002000 	.word	0x20002000
 8000518:	00000400 	.word	0x00000400
 800051c:	2000008c 	.word	0x2000008c
 8000520:	200000a8 	.word	0x200000a8

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000534:	f7ff fff6 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055e:	f000 fe2b 	bl	80011b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000562:	f7ff fe91 	bl	8000288 <main>

08000566 <LoopForever>:

LoopForever:
  b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000574:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 8000578:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800057c:	200000a4 	.word	0x200000a4

08000580 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_IRQHandler>
	...

08000584 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x3c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_Init+0x3c>)
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	0049      	lsls	r1, r1, #1
 800059a:	430a      	orrs	r2, r1
 800059c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 f810 	bl	80005c4 <HAL_InitTick>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d003      	beq.n	80005b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e001      	b.n	80005b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f7ff fec0 	bl	8000334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	781b      	ldrb	r3, [r3, #0]
}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b002      	add	sp, #8
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40022000 	.word	0x40022000

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	230f      	movs	r3, #15
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <HAL_InitTick+0x88>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d02b      	beq.n	8000634 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <HAL_InitTick+0x8c>)
 80005de:	681c      	ldr	r4, [r3, #0]
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_InitTick+0x88>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	0019      	movs	r1, r3
 80005e6:	23fa      	movs	r3, #250	; 0xfa
 80005e8:	0098      	lsls	r0, r3, #2
 80005ea:	f7ff fd93 	bl	8000114 <__udivsi3>
 80005ee:	0003      	movs	r3, r0
 80005f0:	0019      	movs	r1, r3
 80005f2:	0020      	movs	r0, r4
 80005f4:	f7ff fd8e 	bl	8000114 <__udivsi3>
 80005f8:	0003      	movs	r3, r0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8ef 	bl	80007de <HAL_SYSTICK_Config>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d112      	bne.n	800062a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d80a      	bhi.n	8000620 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	2301      	movs	r3, #1
 800060e:	425b      	negs	r3, r3
 8000610:	2200      	movs	r2, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f8ce 	bl	80007b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_InitTick+0x90>)
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	e00d      	b.n	800063c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000620:	230f      	movs	r3, #15
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e008      	b.n	800063c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800062a:	230f      	movs	r3, #15
 800062c:	18fb      	adds	r3, r7, r3
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e003      	b.n	800063c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000634:	230f      	movs	r3, #15
 8000636:	18fb      	adds	r3, r7, r3
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800063c:	230f      	movs	r3, #15
 800063e:	18fb      	adds	r3, r7, r3
 8000640:	781b      	ldrb	r3, [r3, #0]
}
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b005      	add	sp, #20
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000008 	.word	0x20000008
 8000650:	20000000 	.word	0x20000000
 8000654:	20000004 	.word	0x20000004

08000658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_IncTick+0x1c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	001a      	movs	r2, r3
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_IncTick+0x20>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	18d2      	adds	r2, r2, r3
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <HAL_IncTick+0x20>)
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000008 	.word	0x20000008
 8000678:	20000090 	.word	0x20000090

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b02      	ldr	r3, [pc, #8]	; (800068c <HAL_GetTick+0x10>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000090 	.word	0x20000090

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b7f      	cmp	r3, #127	; 0x7f
 80006a4:	d828      	bhi.n	80006f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a6:	4a2f      	ldr	r2, [pc, #188]	; (8000764 <__NVIC_SetPriority+0xd4>)
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	089b      	lsrs	r3, r3, #2
 80006b0:	33c0      	adds	r3, #192	; 0xc0
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	589b      	ldr	r3, [r3, r2]
 80006b6:	1dfa      	adds	r2, r7, #7
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	0011      	movs	r1, r2
 80006bc:	2203      	movs	r2, #3
 80006be:	400a      	ands	r2, r1
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	21ff      	movs	r1, #255	; 0xff
 80006c4:	4091      	lsls	r1, r2
 80006c6:	000a      	movs	r2, r1
 80006c8:	43d2      	mvns	r2, r2
 80006ca:	401a      	ands	r2, r3
 80006cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	401a      	ands	r2, r3
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0018      	movs	r0, r3
 80006dc:	2303      	movs	r3, #3
 80006de:	4003      	ands	r3, r0
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e4:	481f      	ldr	r0, [pc, #124]	; (8000764 <__NVIC_SetPriority+0xd4>)
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	089b      	lsrs	r3, r3, #2
 80006ee:	430a      	orrs	r2, r1
 80006f0:	33c0      	adds	r3, #192	; 0xc0
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006f6:	e031      	b.n	800075c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <__NVIC_SetPriority+0xd8>)
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	0019      	movs	r1, r3
 8000700:	230f      	movs	r3, #15
 8000702:	400b      	ands	r3, r1
 8000704:	3b08      	subs	r3, #8
 8000706:	089b      	lsrs	r3, r3, #2
 8000708:	3306      	adds	r3, #6
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	3304      	adds	r3, #4
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	1dfa      	adds	r2, r7, #7
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	0011      	movs	r1, r2
 8000718:	2203      	movs	r2, #3
 800071a:	400a      	ands	r2, r1
 800071c:	00d2      	lsls	r2, r2, #3
 800071e:	21ff      	movs	r1, #255	; 0xff
 8000720:	4091      	lsls	r1, r2
 8000722:	000a      	movs	r2, r1
 8000724:	43d2      	mvns	r2, r2
 8000726:	401a      	ands	r2, r3
 8000728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	019b      	lsls	r3, r3, #6
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	401a      	ands	r2, r3
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0018      	movs	r0, r3
 8000738:	2303      	movs	r3, #3
 800073a:	4003      	ands	r3, r0
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <__NVIC_SetPriority+0xd8>)
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	001c      	movs	r4, r3
 8000748:	230f      	movs	r3, #15
 800074a:	4023      	ands	r3, r4
 800074c:	3b08      	subs	r3, #8
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	430a      	orrs	r2, r1
 8000752:	3306      	adds	r3, #6
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	18c3      	adds	r3, r0, r3
 8000758:	3304      	adds	r3, #4
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	045b      	lsls	r3, r3, #17
 800077c:	429a      	cmp	r2, r3
 800077e:	d301      	bcc.n	8000784 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000780:	2301      	movs	r3, #1
 8000782:	e010      	b.n	80007a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <SysTick_Config+0x44>)
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	3a01      	subs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	2103      	movs	r1, #3
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff ff7c 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x44>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	0018      	movs	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b002      	add	sp, #8
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	210f      	movs	r1, #15
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	1c02      	adds	r2, r0, #0
 80007c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b004      	add	sp, #16
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff ffbf 	bl	800076c <SysTick_Config>
 80007ee:	0003      	movs	r3, r0
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000806:	4013      	ands	r3, r2
 8000808:	0019      	movs	r1, r3
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	430a      	orrs	r2, r1
 8000810:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	429a      	cmp	r2, r3
 800081a:	d11f      	bne.n	800085c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	0013      	movs	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	189b      	adds	r3, r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4912      	ldr	r1, [pc, #72]	; (8000874 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fc72 	bl	8000114 <__udivsi3>
 8000830:	0003      	movs	r3, r0
 8000832:	3301      	adds	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000836:	e008      	b.n	800084a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	3b01      	subs	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	e001      	b.n	800084a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000846:	2303      	movs	r3, #3
 8000848:	e009      	b.n	800085e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	401a      	ands	r2, r3
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	429a      	cmp	r2, r3
 800085a:	d0ed      	beq.n	8000838 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b004      	add	sp, #16
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	40007000 	.word	0x40007000
 800086c:	fffff9ff 	.word	0xfffff9ff
 8000870:	20000000 	.word	0x20000000
 8000874:	000f4240 	.word	0x000f4240

08000878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e2f3      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	d100      	bne.n	8000896 <HAL_RCC_OscConfig+0x1e>
 8000894:	e07c      	b.n	8000990 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000896:	4bc3      	ldr	r3, [pc, #780]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	2238      	movs	r2, #56	; 0x38
 800089c:	4013      	ands	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008a0:	4bc0      	ldr	r3, [pc, #768]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	2203      	movs	r2, #3
 80008a6:	4013      	ands	r3, r2
 80008a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	2b10      	cmp	r3, #16
 80008ae:	d102      	bne.n	80008b6 <HAL_RCC_OscConfig+0x3e>
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d002      	beq.n	80008bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d10b      	bne.n	80008d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008bc:	4bb9      	ldr	r3, [pc, #740]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	029b      	lsls	r3, r3, #10
 80008c4:	4013      	ands	r3, r2
 80008c6:	d062      	beq.n	800098e <HAL_RCC_OscConfig+0x116>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d15e      	bne.n	800098e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e2ce      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	025b      	lsls	r3, r3, #9
 80008dc:	429a      	cmp	r2, r3
 80008de:	d107      	bne.n	80008f0 <HAL_RCC_OscConfig+0x78>
 80008e0:	4bb0      	ldr	r3, [pc, #704]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4baf      	ldr	r3, [pc, #700]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	0249      	lsls	r1, r1, #9
 80008ea:	430a      	orrs	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	e020      	b.n	8000932 <HAL_RCC_OscConfig+0xba>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685a      	ldr	r2, [r3, #4]
 80008f4:	23a0      	movs	r3, #160	; 0xa0
 80008f6:	02db      	lsls	r3, r3, #11
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d10e      	bne.n	800091a <HAL_RCC_OscConfig+0xa2>
 80008fc:	4ba9      	ldr	r3, [pc, #676]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4ba8      	ldr	r3, [pc, #672]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	02c9      	lsls	r1, r1, #11
 8000906:	430a      	orrs	r2, r1
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	4ba6      	ldr	r3, [pc, #664]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4ba5      	ldr	r3, [pc, #660]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0249      	lsls	r1, r1, #9
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	e00b      	b.n	8000932 <HAL_RCC_OscConfig+0xba>
 800091a:	4ba2      	ldr	r3, [pc, #648]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4ba1      	ldr	r3, [pc, #644]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000920:	49a1      	ldr	r1, [pc, #644]	; (8000ba8 <HAL_RCC_OscConfig+0x330>)
 8000922:	400a      	ands	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b9f      	ldr	r3, [pc, #636]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b9e      	ldr	r3, [pc, #632]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 800092c:	499f      	ldr	r1, [pc, #636]	; (8000bac <HAL_RCC_OscConfig+0x334>)
 800092e:	400a      	ands	r2, r1
 8000930:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d014      	beq.n	8000964 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800093a:	f7ff fe9f 	bl	800067c <HAL_GetTick>
 800093e:	0003      	movs	r3, r0
 8000940:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000942:	e008      	b.n	8000956 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000944:	f7ff fe9a 	bl	800067c <HAL_GetTick>
 8000948:	0002      	movs	r2, r0
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b64      	cmp	r3, #100	; 0x64
 8000950:	d901      	bls.n	8000956 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e28d      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000956:	4b93      	ldr	r3, [pc, #588]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	029b      	lsls	r3, r3, #10
 800095e:	4013      	ands	r3, r2
 8000960:	d0f0      	beq.n	8000944 <HAL_RCC_OscConfig+0xcc>
 8000962:	e015      	b.n	8000990 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000964:	f7ff fe8a 	bl	800067c <HAL_GetTick>
 8000968:	0003      	movs	r3, r0
 800096a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800096c:	e008      	b.n	8000980 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800096e:	f7ff fe85 	bl	800067c <HAL_GetTick>
 8000972:	0002      	movs	r2, r0
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2b64      	cmp	r3, #100	; 0x64
 800097a:	d901      	bls.n	8000980 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800097c:	2303      	movs	r3, #3
 800097e:	e278      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000980:	4b88      	ldr	r3, [pc, #544]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	029b      	lsls	r3, r3, #10
 8000988:	4013      	ands	r3, r2
 800098a:	d1f0      	bne.n	800096e <HAL_RCC_OscConfig+0xf6>
 800098c:	e000      	b.n	8000990 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800098e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2202      	movs	r2, #2
 8000996:	4013      	ands	r3, r2
 8000998:	d100      	bne.n	800099c <HAL_RCC_OscConfig+0x124>
 800099a:	e099      	b.n	8000ad0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800099c:	4b81      	ldr	r3, [pc, #516]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2238      	movs	r2, #56	; 0x38
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009a6:	4b7f      	ldr	r3, [pc, #508]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	2203      	movs	r2, #3
 80009ac:	4013      	ands	r3, r2
 80009ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2b10      	cmp	r3, #16
 80009b4:	d102      	bne.n	80009bc <HAL_RCC_OscConfig+0x144>
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d002      	beq.n	80009c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d135      	bne.n	8000a2e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80009c2:	4b78      	ldr	r3, [pc, #480]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	4013      	ands	r3, r2
 80009cc:	d005      	beq.n	80009da <HAL_RCC_OscConfig+0x162>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e24b      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009da:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	4a74      	ldr	r2, [pc, #464]	; (8000bb0 <HAL_RCC_OscConfig+0x338>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	0019      	movs	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	021a      	lsls	r2, r3, #8
 80009ea:	4b6e      	ldr	r3, [pc, #440]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80009ec:	430a      	orrs	r2, r1
 80009ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d112      	bne.n	8000a1c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80009f6:	4b6b      	ldr	r3, [pc, #428]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a6e      	ldr	r2, [pc, #440]	; (8000bb4 <HAL_RCC_OscConfig+0x33c>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	0019      	movs	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	691a      	ldr	r2, [r3, #16]
 8000a04:	4b67      	ldr	r3, [pc, #412]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000a0a:	4b66      	ldr	r3, [pc, #408]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	0adb      	lsrs	r3, r3, #11
 8000a10:	2207      	movs	r2, #7
 8000a12:	4013      	ands	r3, r2
 8000a14:	4a68      	ldr	r2, [pc, #416]	; (8000bb8 <HAL_RCC_OscConfig+0x340>)
 8000a16:	40da      	lsrs	r2, r3
 8000a18:	4b68      	ldr	r3, [pc, #416]	; (8000bbc <HAL_RCC_OscConfig+0x344>)
 8000a1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000a1c:	4b68      	ldr	r3, [pc, #416]	; (8000bc0 <HAL_RCC_OscConfig+0x348>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fdcf 	bl	80005c4 <HAL_InitTick>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d051      	beq.n	8000ace <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e221      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d030      	beq.n	8000a98 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000a36:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a5e      	ldr	r2, [pc, #376]	; (8000bb4 <HAL_RCC_OscConfig+0x33c>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	0019      	movs	r1, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	691a      	ldr	r2, [r3, #16]
 8000a44:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a46:	430a      	orrs	r2, r1
 8000a48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000a4a:	4b56      	ldr	r3, [pc, #344]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0049      	lsls	r1, r1, #1
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a58:	f7ff fe10 	bl	800067c <HAL_GetTick>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a60:	e008      	b.n	8000a74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a62:	f7ff fe0b 	bl	800067c <HAL_GetTick>
 8000a66:	0002      	movs	r2, r0
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d901      	bls.n	8000a74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000a70:	2303      	movs	r3, #3
 8000a72:	e1fe      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a74:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d0f0      	beq.n	8000a62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a80:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a4a      	ldr	r2, [pc, #296]	; (8000bb0 <HAL_RCC_OscConfig+0x338>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	0019      	movs	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	021a      	lsls	r2, r3, #8
 8000a90:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a92:	430a      	orrs	r2, r1
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	e01b      	b.n	8000ad0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000a98:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000a9e:	4949      	ldr	r1, [pc, #292]	; (8000bc4 <HAL_RCC_OscConfig+0x34c>)
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fdea 	bl	800067c <HAL_GetTick>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000aac:	e008      	b.n	8000ac0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aae:	f7ff fde5 	bl	800067c <HAL_GetTick>
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e1d8      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	d1f0      	bne.n	8000aae <HAL_RCC_OscConfig+0x236>
 8000acc:	e000      	b.n	8000ad0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ace:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d047      	beq.n	8000b6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2238      	movs	r2, #56	; 0x38
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b18      	cmp	r3, #24
 8000ae4:	d10a      	bne.n	8000afc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	2202      	movs	r2, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	d03c      	beq.n	8000b6a <HAL_RCC_OscConfig+0x2f2>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d138      	bne.n	8000b6a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e1ba      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d019      	beq.n	8000b38 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b10:	f7ff fdb4 	bl	800067c <HAL_GetTick>
 8000b14:	0003      	movs	r3, r0
 8000b16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b18:	e008      	b.n	8000b2c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b1a:	f7ff fdaf 	bl	800067c <HAL_GetTick>
 8000b1e:	0002      	movs	r2, r0
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e1a2      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b30:	2202      	movs	r2, #2
 8000b32:	4013      	ands	r3, r2
 8000b34:	d0f1      	beq.n	8000b1a <HAL_RCC_OscConfig+0x2a2>
 8000b36:	e018      	b.n	8000b6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	438a      	bics	r2, r1
 8000b42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b44:	f7ff fd9a 	bl	800067c <HAL_GetTick>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b4c:	e008      	b.n	8000b60 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b4e:	f7ff fd95 	bl	800067c <HAL_GetTick>
 8000b52:	0002      	movs	r2, r0
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d901      	bls.n	8000b60 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e188      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b64:	2202      	movs	r2, #2
 8000b66:	4013      	ands	r3, r2
 8000b68:	d1f1      	bne.n	8000b4e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2204      	movs	r2, #4
 8000b70:	4013      	ands	r3, r2
 8000b72:	d100      	bne.n	8000b76 <HAL_RCC_OscConfig+0x2fe>
 8000b74:	e0c6      	b.n	8000d04 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b76:	231f      	movs	r3, #31
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2238      	movs	r2, #56	; 0x38
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b20      	cmp	r3, #32
 8000b88:	d11e      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_RCC_OscConfig+0x32c>)
 8000b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8e:	2202      	movs	r2, #2
 8000b90:	4013      	ands	r3, r2
 8000b92:	d100      	bne.n	8000b96 <HAL_RCC_OscConfig+0x31e>
 8000b94:	e0b6      	b.n	8000d04 <HAL_RCC_OscConfig+0x48c>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d000      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x328>
 8000b9e:	e0b1      	b.n	8000d04 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e166      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	fffeffff 	.word	0xfffeffff
 8000bac:	fffbffff 	.word	0xfffbffff
 8000bb0:	ffff80ff 	.word	0xffff80ff
 8000bb4:	ffffc7ff 	.word	0xffffc7ff
 8000bb8:	00f42400 	.word	0x00f42400
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000004 	.word	0x20000004
 8000bc4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000bc8:	4bac      	ldr	r3, [pc, #688]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	055b      	lsls	r3, r3, #21
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d101      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x360>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_RCC_OscConfig+0x362>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d011      	beq.n	8000c02 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4ba7      	ldr	r3, [pc, #668]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000be2:	4ba6      	ldr	r3, [pc, #664]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	0549      	lsls	r1, r1, #21
 8000be8:	430a      	orrs	r2, r1
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bec:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000bee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	055b      	lsls	r3, r3, #21
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c02:	4b9f      	ldr	r3, [pc, #636]	; (8000e80 <HAL_RCC_OscConfig+0x608>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	d11a      	bne.n	8000c44 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c0e:	4b9c      	ldr	r3, [pc, #624]	; (8000e80 <HAL_RCC_OscConfig+0x608>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b9b      	ldr	r3, [pc, #620]	; (8000e80 <HAL_RCC_OscConfig+0x608>)
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fd2e 	bl	800067c <HAL_GetTick>
 8000c20:	0003      	movs	r3, r0
 8000c22:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c24:	e008      	b.n	8000c38 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c26:	f7ff fd29 	bl	800067c <HAL_GetTick>
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d901      	bls.n	8000c38 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e11c      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c38:	4b91      	ldr	r3, [pc, #580]	; (8000e80 <HAL_RCC_OscConfig+0x608>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	d0f0      	beq.n	8000c26 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d106      	bne.n	8000c5a <HAL_RCC_OscConfig+0x3e2>
 8000c4c:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c50:	4b8a      	ldr	r3, [pc, #552]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c52:	2101      	movs	r1, #1
 8000c54:	430a      	orrs	r2, r1
 8000c56:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c58:	e01c      	b.n	8000c94 <HAL_RCC_OscConfig+0x41c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x404>
 8000c62:	4b86      	ldr	r3, [pc, #536]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c66:	4b85      	ldr	r3, [pc, #532]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c68:	2104      	movs	r1, #4
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c6e:	4b83      	ldr	r3, [pc, #524]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c72:	4b82      	ldr	r3, [pc, #520]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	430a      	orrs	r2, r1
 8000c78:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0x41c>
 8000c7c:	4b7f      	ldr	r3, [pc, #508]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c80:	4b7e      	ldr	r3, [pc, #504]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c82:	2101      	movs	r1, #1
 8000c84:	438a      	bics	r2, r1
 8000c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c88:	4b7c      	ldr	r3, [pc, #496]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c8c:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000c8e:	2104      	movs	r1, #4
 8000c90:	438a      	bics	r2, r1
 8000c92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d014      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fcee 	bl	800067c <HAL_GetTick>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000ca4:	e009      	b.n	8000cba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca6:	f7ff fce9 	bl	800067c <HAL_GetTick>
 8000caa:	0002      	movs	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a74      	ldr	r2, [pc, #464]	; (8000e84 <HAL_RCC_OscConfig+0x60c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e0db      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cba:	4b70      	ldr	r3, [pc, #448]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x42e>
 8000cc4:	e013      	b.n	8000cee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fcd9 	bl	800067c <HAL_GetTick>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cce:	e009      	b.n	8000ce4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcd4 	bl	800067c <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	4a6a      	ldr	r2, [pc, #424]	; (8000e84 <HAL_RCC_OscConfig+0x60c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e0c6      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000cee:	231f      	movs	r3, #31
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d105      	bne.n	8000d04 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfc:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000cfe:	4962      	ldr	r1, [pc, #392]	; (8000e88 <HAL_RCC_OscConfig+0x610>)
 8000d00:	400a      	ands	r2, r1
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d100      	bne.n	8000d0e <HAL_RCC_OscConfig+0x496>
 8000d0c:	e0b0      	b.n	8000e70 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d0e:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	2238      	movs	r2, #56	; 0x38
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d100      	bne.n	8000d1c <HAL_RCC_OscConfig+0x4a4>
 8000d1a:	e078      	b.n	8000e0e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d153      	bne.n	8000dcc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d24:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d2a:	4958      	ldr	r1, [pc, #352]	; (8000e8c <HAL_RCC_OscConfig+0x614>)
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d30:	f7ff fca4 	bl	800067c <HAL_GetTick>
 8000d34:	0003      	movs	r3, r0
 8000d36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d3a:	f7ff fc9f 	bl	800067c <HAL_GetTick>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e092      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	049b      	lsls	r3, r3, #18
 8000d54:	4013      	ands	r3, r2
 8000d56:	d1f0      	bne.n	8000d3a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d58:	4b48      	ldr	r3, [pc, #288]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	; (8000e90 <HAL_RCC_OscConfig+0x618>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	0019      	movs	r1, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1a      	ldr	r2, [r3, #32]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d86:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0449      	lsls	r1, r1, #17
 8000d90:	430a      	orrs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	0549      	lsls	r1, r1, #21
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da2:	f7ff fc6b 	bl	800067c <HAL_GetTick>
 8000da6:	0003      	movs	r3, r0
 8000da8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fc66 	bl	800067c <HAL_GetTick>
 8000db0:	0002      	movs	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e059      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	049b      	lsls	r3, r3, #18
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x534>
 8000dca:	e051      	b.n	8000e70 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000dd2:	492e      	ldr	r1, [pc, #184]	; (8000e8c <HAL_RCC_OscConfig+0x614>)
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc50 	bl	800067c <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de2:	f7ff fc4b 	bl	800067c <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e03e      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	049b      	lsls	r3, r3, #18
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d1f0      	bne.n	8000de2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000e06:	4923      	ldr	r1, [pc, #140]	; (8000e94 <HAL_RCC_OscConfig+0x61c>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	e030      	b.n	8000e70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e02b      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_RCC_OscConfig+0x604>)
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	2203      	movs	r2, #3
 8000e24:	401a      	ands	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d11e      	bne.n	8000e6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2270      	movs	r2, #112	; 0x70
 8000e32:	401a      	ands	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d117      	bne.n	8000e6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	23fe      	movs	r3, #254	; 0xfe
 8000e40:	01db      	lsls	r3, r3, #7
 8000e42:	401a      	ands	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d10e      	bne.n	8000e6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	23f8      	movs	r3, #248	; 0xf8
 8000e52:	039b      	lsls	r3, r3, #14
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d106      	bne.n	8000e6c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	0f5b      	lsrs	r3, r3, #29
 8000e62:	075a      	lsls	r2, r3, #29
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d001      	beq.n	8000e70 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b008      	add	sp, #32
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40007000 	.word	0x40007000
 8000e84:	00001388 	.word	0x00001388
 8000e88:	efffffff 	.word	0xefffffff
 8000e8c:	feffffff 	.word	0xfeffffff
 8000e90:	1fc1808c 	.word	0x1fc1808c
 8000e94:	effefffc 	.word	0xeffefffc

08000e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e0e9      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000eac:	4b76      	ldr	r3, [pc, #472]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d91e      	bls.n	8000ef8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eba:	4b73      	ldr	r3, [pc, #460]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	4393      	bics	r3, r2
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	4b70      	ldr	r3, [pc, #448]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8000ecc:	f7ff fbd6 	bl	800067c <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ed4:	e009      	b.n	8000eea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed6:	f7ff fbd1 	bl	800067c <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	4a6a      	ldr	r2, [pc, #424]	; (800108c <HAL_RCC_ClockConfig+0x1f4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e0ca      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2207      	movs	r2, #7
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2202      	movs	r2, #2
 8000efe:	4013      	ands	r3, r2
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2204      	movs	r2, #4
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d006      	beq.n	8000f1a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f0c:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	4b5f      	ldr	r3, [pc, #380]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f12:	21e0      	movs	r1, #224	; 0xe0
 8000f14:	01c9      	lsls	r1, r1, #7
 8000f16:	430a      	orrs	r2, r1
 8000f18:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	4a5d      	ldr	r2, [pc, #372]	; (8001094 <HAL_RCC_ClockConfig+0x1fc>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	0019      	movs	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	4b59      	ldr	r3, [pc, #356]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	d057      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d107      	bne.n	8000f50 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f40:	4b53      	ldr	r3, [pc, #332]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	029b      	lsls	r3, r3, #10
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d12b      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e097      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d107      	bne.n	8000f68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	049b      	lsls	r3, r3, #18
 8000f60:	4013      	ands	r3, r2
 8000f62:	d11f      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e08b      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d107      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f70:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d113      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e07f      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f88:	4b41      	ldr	r3, [pc, #260]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d108      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e074      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e06d      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2207      	movs	r2, #7
 8000faa:	4393      	bics	r3, r2
 8000fac:	0019      	movs	r1, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fb8:	f7ff fb60 	bl	800067c <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc0:	e009      	b.n	8000fd6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc2:	f7ff fb5b 	bl	800067c <HAL_GetTick>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_RCC_ClockConfig+0x1f4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e054      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2238      	movs	r2, #56	; 0x38
 8000fdc:	401a      	ands	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d1ec      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2207      	movs	r2, #7
 8000fee:	4013      	ands	r3, r2
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d21e      	bcs.n	8001034 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	4393      	bics	r3, r2
 8000ffe:	0019      	movs	r1, r3
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001008:	f7ff fb38 	bl	800067c <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001010:	e009      	b.n	8001026 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001012:	f7ff fb33 	bl	800067c <HAL_GetTick>
 8001016:	0002      	movs	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_RCC_ClockConfig+0x1f4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e02c      	b.n	8001080 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_RCC_ClockConfig+0x1f0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2207      	movs	r2, #7
 800102c:	4013      	ands	r3, r2
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2204      	movs	r2, #4
 800103a:	4013      	ands	r3, r2
 800103c:	d009      	beq.n	8001052 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <HAL_RCC_ClockConfig+0x200>)
 8001044:	4013      	ands	r3, r2
 8001046:	0019      	movs	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 800104e:	430a      	orrs	r2, r1
 8001050:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001052:	f000 f829 	bl	80010a8 <HAL_RCC_GetSysClockFreq>
 8001056:	0001      	movs	r1, r0
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_RCC_ClockConfig+0x1f8>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	220f      	movs	r2, #15
 8001060:	401a      	ands	r2, r3
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_RCC_ClockConfig+0x204>)
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	58d3      	ldr	r3, [r2, r3]
 8001068:	221f      	movs	r2, #31
 800106a:	4013      	ands	r3, r2
 800106c:	000a      	movs	r2, r1
 800106e:	40da      	lsrs	r2, r3
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_RCC_ClockConfig+0x208>)
 8001072:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_RCC_ClockConfig+0x20c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff faa3 	bl	80005c4 <HAL_InitTick>
 800107e:	0003      	movs	r3, r0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40022000 	.word	0x40022000
 800108c:	00001388 	.word	0x00001388
 8001090:	40021000 	.word	0x40021000
 8001094:	fffff0ff 	.word	0xfffff0ff
 8001098:	ffff8fff 	.word	0xffff8fff
 800109c:	08002334 	.word	0x08002334
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2238      	movs	r2, #56	; 0x38
 80010b4:	4013      	ands	r3, r2
 80010b6:	d10f      	bne.n	80010d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0adb      	lsrs	r3, r3, #11
 80010be:	2207      	movs	r2, #7
 80010c0:	4013      	ands	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	4835      	ldr	r0, [pc, #212]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80010ce:	f7ff f821 	bl	8000114 <__udivsi3>
 80010d2:	0003      	movs	r3, r0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	e05d      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2238      	movs	r2, #56	; 0x38
 80010de:	4013      	ands	r3, r2
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d102      	bne.n	80010ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	e054      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2238      	movs	r2, #56	; 0x38
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d138      	bne.n	8001168 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2203      	movs	r2, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	2207      	movs	r2, #7
 8001108:	4013      	ands	r3, r2
 800110a:	3301      	adds	r3, #1
 800110c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d10d      	bne.n	8001130 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	4824      	ldr	r0, [pc, #144]	; (80011a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001118:	f7fe fffc 	bl	8000114 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	0019      	movs	r1, r3
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	227f      	movs	r2, #127	; 0x7f
 8001128:	4013      	ands	r3, r2
 800112a:	434b      	muls	r3, r1
 800112c:	617b      	str	r3, [r7, #20]
        break;
 800112e:	e00d      	b.n	800114c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001134:	f7fe ffee 	bl	8000114 <__udivsi3>
 8001138:	0003      	movs	r3, r0
 800113a:	0019      	movs	r1, r3
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	227f      	movs	r2, #127	; 0x7f
 8001144:	4013      	ands	r3, r2
 8001146:	434b      	muls	r3, r1
 8001148:	617b      	str	r3, [r7, #20]
        break;
 800114a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0f5b      	lsrs	r3, r3, #29
 8001152:	2207      	movs	r2, #7
 8001154:	4013      	ands	r3, r2
 8001156:	3301      	adds	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7fe ffd9 	bl	8000114 <__udivsi3>
 8001162:	0003      	movs	r3, r0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	e015      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2238      	movs	r2, #56	; 0x38
 800116e:	4013      	ands	r3, r2
 8001170:	2b20      	cmp	r3, #32
 8001172:	d103      	bne.n	800117c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2238      	movs	r2, #56	; 0x38
 8001182:	4013      	ands	r3, r2
 8001184:	2b18      	cmp	r3, #24
 8001186:	d103      	bne.n	8001190 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001188:	23fa      	movs	r3, #250	; 0xfa
 800118a:	01db      	lsls	r3, r3, #7
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e001      	b.n	8001194 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001194:	693b      	ldr	r3, [r7, #16]
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b006      	add	sp, #24
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40021000 	.word	0x40021000
 80011a4:	00f42400 	.word	0x00f42400
 80011a8:	007a1200 	.word	0x007a1200

080011ac <__errno>:
 80011ac:	4b01      	ldr	r3, [pc, #4]	; (80011b4 <__errno+0x8>)
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	4770      	bx	lr
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	2000000c 	.word	0x2000000c

080011b8 <__libc_init_array>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	2600      	movs	r6, #0
 80011bc:	4d0c      	ldr	r5, [pc, #48]	; (80011f0 <__libc_init_array+0x38>)
 80011be:	4c0d      	ldr	r4, [pc, #52]	; (80011f4 <__libc_init_array+0x3c>)
 80011c0:	1b64      	subs	r4, r4, r5
 80011c2:	10a4      	asrs	r4, r4, #2
 80011c4:	42a6      	cmp	r6, r4
 80011c6:	d109      	bne.n	80011dc <__libc_init_array+0x24>
 80011c8:	2600      	movs	r6, #0
 80011ca:	f001 f8a7 	bl	800231c <_init>
 80011ce:	4d0a      	ldr	r5, [pc, #40]	; (80011f8 <__libc_init_array+0x40>)
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <__libc_init_array+0x44>)
 80011d2:	1b64      	subs	r4, r4, r5
 80011d4:	10a4      	asrs	r4, r4, #2
 80011d6:	42a6      	cmp	r6, r4
 80011d8:	d105      	bne.n	80011e6 <__libc_init_array+0x2e>
 80011da:	bd70      	pop	{r4, r5, r6, pc}
 80011dc:	00b3      	lsls	r3, r6, #2
 80011de:	58eb      	ldr	r3, [r5, r3]
 80011e0:	4798      	blx	r3
 80011e2:	3601      	adds	r6, #1
 80011e4:	e7ee      	b.n	80011c4 <__libc_init_array+0xc>
 80011e6:	00b3      	lsls	r3, r6, #2
 80011e8:	58eb      	ldr	r3, [r5, r3]
 80011ea:	4798      	blx	r3
 80011ec:	3601      	adds	r6, #1
 80011ee:	e7f2      	b.n	80011d6 <__libc_init_array+0x1e>
 80011f0:	080024bc 	.word	0x080024bc
 80011f4:	080024bc 	.word	0x080024bc
 80011f8:	080024bc 	.word	0x080024bc
 80011fc:	080024c0 	.word	0x080024c0

08001200 <memset>:
 8001200:	0003      	movs	r3, r0
 8001202:	1882      	adds	r2, r0, r2
 8001204:	4293      	cmp	r3, r2
 8001206:	d100      	bne.n	800120a <memset+0xa>
 8001208:	4770      	bx	lr
 800120a:	7019      	strb	r1, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	e7f9      	b.n	8001204 <memset+0x4>

08001210 <rand>:
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <rand+0x5c>)
 8001212:	b510      	push	{r4, lr}
 8001214:	681c      	ldr	r4, [r3, #0]
 8001216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001218:	2b00      	cmp	r3, #0
 800121a:	d116      	bne.n	800124a <rand+0x3a>
 800121c:	2018      	movs	r0, #24
 800121e:	f000 f863 	bl	80012e8 <malloc>
 8001222:	1e02      	subs	r2, r0, #0
 8001224:	63a0      	str	r0, [r4, #56]	; 0x38
 8001226:	d104      	bne.n	8001232 <rand+0x22>
 8001228:	214e      	movs	r1, #78	; 0x4e
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <rand+0x60>)
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <rand+0x64>)
 800122e:	f000 f82d 	bl	800128c <__assert_func>
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <rand+0x68>)
 8001234:	2100      	movs	r1, #0
 8001236:	6003      	str	r3, [r0, #0]
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <rand+0x6c>)
 800123a:	6043      	str	r3, [r0, #4]
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <rand+0x70>)
 800123e:	6083      	str	r3, [r0, #8]
 8001240:	230b      	movs	r3, #11
 8001242:	8183      	strh	r3, [r0, #12]
 8001244:	2001      	movs	r0, #1
 8001246:	6110      	str	r0, [r2, #16]
 8001248:	6151      	str	r1, [r2, #20]
 800124a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <rand+0x74>)
 800124e:	6920      	ldr	r0, [r4, #16]
 8001250:	6961      	ldr	r1, [r4, #20]
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <rand+0x78>)
 8001254:	f7fe ffea 	bl	800022c <__aeabi_lmul>
 8001258:	2201      	movs	r2, #1
 800125a:	2300      	movs	r3, #0
 800125c:	1880      	adds	r0, r0, r2
 800125e:	4159      	adcs	r1, r3
 8001260:	6120      	str	r0, [r4, #16]
 8001262:	6161      	str	r1, [r4, #20]
 8001264:	0048      	lsls	r0, r1, #1
 8001266:	0840      	lsrs	r0, r0, #1
 8001268:	bd10      	pop	{r4, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	2000000c 	.word	0x2000000c
 8001270:	08002378 	.word	0x08002378
 8001274:	0800238f 	.word	0x0800238f
 8001278:	abcd330e 	.word	0xabcd330e
 800127c:	e66d1234 	.word	0xe66d1234
 8001280:	0005deec 	.word	0x0005deec
 8001284:	4c957f2d 	.word	0x4c957f2d
 8001288:	5851f42d 	.word	0x5851f42d

0800128c <__assert_func>:
 800128c:	b530      	push	{r4, r5, lr}
 800128e:	0014      	movs	r4, r2
 8001290:	001a      	movs	r2, r3
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <__assert_func+0x2c>)
 8001294:	0005      	movs	r5, r0
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b085      	sub	sp, #20
 800129a:	68d8      	ldr	r0, [r3, #12]
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <__assert_func+0x30>)
 800129e:	2c00      	cmp	r4, #0
 80012a0:	d101      	bne.n	80012a6 <__assert_func+0x1a>
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <__assert_func+0x34>)
 80012a4:	001c      	movs	r4, r3
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	9100      	str	r1, [sp, #0]
 80012aa:	002b      	movs	r3, r5
 80012ac:	4905      	ldr	r1, [pc, #20]	; (80012c4 <__assert_func+0x38>)
 80012ae:	9402      	str	r4, [sp, #8]
 80012b0:	f000 f80a 	bl	80012c8 <fiprintf>
 80012b4:	f000 fcc8 	bl	8001c48 <abort>
 80012b8:	2000000c 	.word	0x2000000c
 80012bc:	080023ea 	.word	0x080023ea
 80012c0:	08002425 	.word	0x08002425
 80012c4:	080023f7 	.word	0x080023f7

080012c8 <fiprintf>:
 80012c8:	b40e      	push	{r1, r2, r3}
 80012ca:	b503      	push	{r0, r1, lr}
 80012cc:	0001      	movs	r1, r0
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <fiprintf+0x1c>)
 80012d2:	cb04      	ldmia	r3!, {r2}
 80012d4:	6800      	ldr	r0, [r0, #0]
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f000 f91a 	bl	8001510 <_vfiprintf_r>
 80012dc:	b002      	add	sp, #8
 80012de:	bc08      	pop	{r3}
 80012e0:	b003      	add	sp, #12
 80012e2:	4718      	bx	r3
 80012e4:	2000000c 	.word	0x2000000c

080012e8 <malloc>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <malloc+0x10>)
 80012ec:	0001      	movs	r1, r0
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	f000 f870 	bl	80013d4 <_malloc_r>
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	2000000c 	.word	0x2000000c

080012fc <_free_r>:
 80012fc:	b570      	push	{r4, r5, r6, lr}
 80012fe:	0005      	movs	r5, r0
 8001300:	2900      	cmp	r1, #0
 8001302:	d010      	beq.n	8001326 <_free_r+0x2a>
 8001304:	1f0c      	subs	r4, r1, #4
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	da00      	bge.n	800130e <_free_r+0x12>
 800130c:	18e4      	adds	r4, r4, r3
 800130e:	0028      	movs	r0, r5
 8001310:	f000 feec 	bl	80020ec <__malloc_lock>
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <_free_r+0x90>)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <_free_r+0x2c>
 800131c:	6063      	str	r3, [r4, #4]
 800131e:	6014      	str	r4, [r2, #0]
 8001320:	0028      	movs	r0, r5
 8001322:	f000 feeb 	bl	80020fc <__malloc_unlock>
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	42a3      	cmp	r3, r4
 800132a:	d908      	bls.n	800133e <_free_r+0x42>
 800132c:	6821      	ldr	r1, [r4, #0]
 800132e:	1860      	adds	r0, r4, r1
 8001330:	4283      	cmp	r3, r0
 8001332:	d1f3      	bne.n	800131c <_free_r+0x20>
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	1841      	adds	r1, r0, r1
 800133a:	6021      	str	r1, [r4, #0]
 800133c:	e7ee      	b.n	800131c <_free_r+0x20>
 800133e:	001a      	movs	r2, r3
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <_free_r+0x4e>
 8001346:	42a3      	cmp	r3, r4
 8001348:	d9f9      	bls.n	800133e <_free_r+0x42>
 800134a:	6811      	ldr	r1, [r2, #0]
 800134c:	1850      	adds	r0, r2, r1
 800134e:	42a0      	cmp	r0, r4
 8001350:	d10b      	bne.n	800136a <_free_r+0x6e>
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	1809      	adds	r1, r1, r0
 8001356:	1850      	adds	r0, r2, r1
 8001358:	6011      	str	r1, [r2, #0]
 800135a:	4283      	cmp	r3, r0
 800135c:	d1e0      	bne.n	8001320 <_free_r+0x24>
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	1841      	adds	r1, r0, r1
 8001364:	6011      	str	r1, [r2, #0]
 8001366:	6053      	str	r3, [r2, #4]
 8001368:	e7da      	b.n	8001320 <_free_r+0x24>
 800136a:	42a0      	cmp	r0, r4
 800136c:	d902      	bls.n	8001374 <_free_r+0x78>
 800136e:	230c      	movs	r3, #12
 8001370:	602b      	str	r3, [r5, #0]
 8001372:	e7d5      	b.n	8001320 <_free_r+0x24>
 8001374:	6821      	ldr	r1, [r4, #0]
 8001376:	1860      	adds	r0, r4, r1
 8001378:	4283      	cmp	r3, r0
 800137a:	d103      	bne.n	8001384 <_free_r+0x88>
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	1841      	adds	r1, r0, r1
 8001382:	6021      	str	r1, [r4, #0]
 8001384:	6063      	str	r3, [r4, #4]
 8001386:	6054      	str	r4, [r2, #4]
 8001388:	e7ca      	b.n	8001320 <_free_r+0x24>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000094 	.word	0x20000094

08001390 <sbrk_aligned>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4e0f      	ldr	r6, [pc, #60]	; (80013d0 <sbrk_aligned+0x40>)
 8001394:	000d      	movs	r5, r1
 8001396:	6831      	ldr	r1, [r6, #0]
 8001398:	0004      	movs	r4, r0
 800139a:	2900      	cmp	r1, #0
 800139c:	d102      	bne.n	80013a4 <sbrk_aligned+0x14>
 800139e:	f000 fb73 	bl	8001a88 <_sbrk_r>
 80013a2:	6030      	str	r0, [r6, #0]
 80013a4:	0029      	movs	r1, r5
 80013a6:	0020      	movs	r0, r4
 80013a8:	f000 fb6e 	bl	8001a88 <_sbrk_r>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d00a      	beq.n	80013c6 <sbrk_aligned+0x36>
 80013b0:	2303      	movs	r3, #3
 80013b2:	1cc5      	adds	r5, r0, #3
 80013b4:	439d      	bics	r5, r3
 80013b6:	42a8      	cmp	r0, r5
 80013b8:	d007      	beq.n	80013ca <sbrk_aligned+0x3a>
 80013ba:	1a29      	subs	r1, r5, r0
 80013bc:	0020      	movs	r0, r4
 80013be:	f000 fb63 	bl	8001a88 <_sbrk_r>
 80013c2:	1c43      	adds	r3, r0, #1
 80013c4:	d101      	bne.n	80013ca <sbrk_aligned+0x3a>
 80013c6:	2501      	movs	r5, #1
 80013c8:	426d      	negs	r5, r5
 80013ca:	0028      	movs	r0, r5
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	20000098 	.word	0x20000098

080013d4 <_malloc_r>:
 80013d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013d6:	2203      	movs	r2, #3
 80013d8:	1ccb      	adds	r3, r1, #3
 80013da:	4393      	bics	r3, r2
 80013dc:	3308      	adds	r3, #8
 80013de:	0006      	movs	r6, r0
 80013e0:	001f      	movs	r7, r3
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d232      	bcs.n	800144c <_malloc_r+0x78>
 80013e6:	270c      	movs	r7, #12
 80013e8:	42b9      	cmp	r1, r7
 80013ea:	d831      	bhi.n	8001450 <_malloc_r+0x7c>
 80013ec:	0030      	movs	r0, r6
 80013ee:	f000 fe7d 	bl	80020ec <__malloc_lock>
 80013f2:	4d32      	ldr	r5, [pc, #200]	; (80014bc <_malloc_r+0xe8>)
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	001c      	movs	r4, r3
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d12e      	bne.n	800145a <_malloc_r+0x86>
 80013fc:	0039      	movs	r1, r7
 80013fe:	0030      	movs	r0, r6
 8001400:	f7ff ffc6 	bl	8001390 <sbrk_aligned>
 8001404:	0004      	movs	r4, r0
 8001406:	1c43      	adds	r3, r0, #1
 8001408:	d11e      	bne.n	8001448 <_malloc_r+0x74>
 800140a:	682c      	ldr	r4, [r5, #0]
 800140c:	0025      	movs	r5, r4
 800140e:	2d00      	cmp	r5, #0
 8001410:	d14a      	bne.n	80014a8 <_malloc_r+0xd4>
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	0029      	movs	r1, r5
 8001416:	18e3      	adds	r3, r4, r3
 8001418:	0030      	movs	r0, r6
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f000 fb34 	bl	8001a88 <_sbrk_r>
 8001420:	9b01      	ldr	r3, [sp, #4]
 8001422:	4283      	cmp	r3, r0
 8001424:	d143      	bne.n	80014ae <_malloc_r+0xda>
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	3703      	adds	r7, #3
 800142a:	1aff      	subs	r7, r7, r3
 800142c:	2303      	movs	r3, #3
 800142e:	439f      	bics	r7, r3
 8001430:	3708      	adds	r7, #8
 8001432:	2f0c      	cmp	r7, #12
 8001434:	d200      	bcs.n	8001438 <_malloc_r+0x64>
 8001436:	270c      	movs	r7, #12
 8001438:	0039      	movs	r1, r7
 800143a:	0030      	movs	r0, r6
 800143c:	f7ff ffa8 	bl	8001390 <sbrk_aligned>
 8001440:	1c43      	adds	r3, r0, #1
 8001442:	d034      	beq.n	80014ae <_malloc_r+0xda>
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	19df      	adds	r7, r3, r7
 8001448:	6027      	str	r7, [r4, #0]
 800144a:	e013      	b.n	8001474 <_malloc_r+0xa0>
 800144c:	2b00      	cmp	r3, #0
 800144e:	dacb      	bge.n	80013e8 <_malloc_r+0x14>
 8001450:	230c      	movs	r3, #12
 8001452:	2500      	movs	r5, #0
 8001454:	6033      	str	r3, [r6, #0]
 8001456:	0028      	movs	r0, r5
 8001458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800145a:	6822      	ldr	r2, [r4, #0]
 800145c:	1bd1      	subs	r1, r2, r7
 800145e:	d420      	bmi.n	80014a2 <_malloc_r+0xce>
 8001460:	290b      	cmp	r1, #11
 8001462:	d917      	bls.n	8001494 <_malloc_r+0xc0>
 8001464:	19e2      	adds	r2, r4, r7
 8001466:	6027      	str	r7, [r4, #0]
 8001468:	42a3      	cmp	r3, r4
 800146a:	d111      	bne.n	8001490 <_malloc_r+0xbc>
 800146c:	602a      	str	r2, [r5, #0]
 800146e:	6863      	ldr	r3, [r4, #4]
 8001470:	6011      	str	r1, [r2, #0]
 8001472:	6053      	str	r3, [r2, #4]
 8001474:	0030      	movs	r0, r6
 8001476:	0025      	movs	r5, r4
 8001478:	f000 fe40 	bl	80020fc <__malloc_unlock>
 800147c:	2207      	movs	r2, #7
 800147e:	350b      	adds	r5, #11
 8001480:	1d23      	adds	r3, r4, #4
 8001482:	4395      	bics	r5, r2
 8001484:	1aea      	subs	r2, r5, r3
 8001486:	429d      	cmp	r5, r3
 8001488:	d0e5      	beq.n	8001456 <_malloc_r+0x82>
 800148a:	1b5b      	subs	r3, r3, r5
 800148c:	50a3      	str	r3, [r4, r2]
 800148e:	e7e2      	b.n	8001456 <_malloc_r+0x82>
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	e7ec      	b.n	800146e <_malloc_r+0x9a>
 8001494:	6862      	ldr	r2, [r4, #4]
 8001496:	42a3      	cmp	r3, r4
 8001498:	d101      	bne.n	800149e <_malloc_r+0xca>
 800149a:	602a      	str	r2, [r5, #0]
 800149c:	e7ea      	b.n	8001474 <_malloc_r+0xa0>
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	e7e8      	b.n	8001474 <_malloc_r+0xa0>
 80014a2:	0023      	movs	r3, r4
 80014a4:	6864      	ldr	r4, [r4, #4]
 80014a6:	e7a7      	b.n	80013f8 <_malloc_r+0x24>
 80014a8:	002c      	movs	r4, r5
 80014aa:	686d      	ldr	r5, [r5, #4]
 80014ac:	e7af      	b.n	800140e <_malloc_r+0x3a>
 80014ae:	230c      	movs	r3, #12
 80014b0:	0030      	movs	r0, r6
 80014b2:	6033      	str	r3, [r6, #0]
 80014b4:	f000 fe22 	bl	80020fc <__malloc_unlock>
 80014b8:	e7cd      	b.n	8001456 <_malloc_r+0x82>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	20000094 	.word	0x20000094

080014c0 <__sfputc_r>:
 80014c0:	6893      	ldr	r3, [r2, #8]
 80014c2:	b510      	push	{r4, lr}
 80014c4:	3b01      	subs	r3, #1
 80014c6:	6093      	str	r3, [r2, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da04      	bge.n	80014d6 <__sfputc_r+0x16>
 80014cc:	6994      	ldr	r4, [r2, #24]
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	db07      	blt.n	80014e2 <__sfputc_r+0x22>
 80014d2:	290a      	cmp	r1, #10
 80014d4:	d005      	beq.n	80014e2 <__sfputc_r+0x22>
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	1c58      	adds	r0, r3, #1
 80014da:	6010      	str	r0, [r2, #0]
 80014dc:	7019      	strb	r1, [r3, #0]
 80014de:	0008      	movs	r0, r1
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	f000 fae3 	bl	8001aac <__swbuf_r>
 80014e6:	0001      	movs	r1, r0
 80014e8:	e7f9      	b.n	80014de <__sfputc_r+0x1e>

080014ea <__sfputs_r>:
 80014ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ec:	0006      	movs	r6, r0
 80014ee:	000f      	movs	r7, r1
 80014f0:	0014      	movs	r4, r2
 80014f2:	18d5      	adds	r5, r2, r3
 80014f4:	42ac      	cmp	r4, r5
 80014f6:	d101      	bne.n	80014fc <__sfputs_r+0x12>
 80014f8:	2000      	movs	r0, #0
 80014fa:	e007      	b.n	800150c <__sfputs_r+0x22>
 80014fc:	7821      	ldrb	r1, [r4, #0]
 80014fe:	003a      	movs	r2, r7
 8001500:	0030      	movs	r0, r6
 8001502:	f7ff ffdd 	bl	80014c0 <__sfputc_r>
 8001506:	3401      	adds	r4, #1
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d1f3      	bne.n	80014f4 <__sfputs_r+0xa>
 800150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001510 <_vfiprintf_r>:
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	b0a1      	sub	sp, #132	; 0x84
 8001514:	0006      	movs	r6, r0
 8001516:	000c      	movs	r4, r1
 8001518:	001f      	movs	r7, r3
 800151a:	9203      	str	r2, [sp, #12]
 800151c:	2800      	cmp	r0, #0
 800151e:	d004      	beq.n	800152a <_vfiprintf_r+0x1a>
 8001520:	6983      	ldr	r3, [r0, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <_vfiprintf_r+0x1a>
 8001526:	f000 fcc5 	bl	8001eb4 <__sinit>
 800152a:	4b8e      	ldr	r3, [pc, #568]	; (8001764 <_vfiprintf_r+0x254>)
 800152c:	429c      	cmp	r4, r3
 800152e:	d11c      	bne.n	800156a <_vfiprintf_r+0x5a>
 8001530:	6874      	ldr	r4, [r6, #4]
 8001532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001534:	07db      	lsls	r3, r3, #31
 8001536:	d405      	bmi.n	8001544 <_vfiprintf_r+0x34>
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	059b      	lsls	r3, r3, #22
 800153c:	d402      	bmi.n	8001544 <_vfiprintf_r+0x34>
 800153e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001540:	f000 fd59 	bl	8001ff6 <__retarget_lock_acquire_recursive>
 8001544:	89a3      	ldrh	r3, [r4, #12]
 8001546:	071b      	lsls	r3, r3, #28
 8001548:	d502      	bpl.n	8001550 <_vfiprintf_r+0x40>
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11d      	bne.n	800158c <_vfiprintf_r+0x7c>
 8001550:	0021      	movs	r1, r4
 8001552:	0030      	movs	r0, r6
 8001554:	f000 fb00 	bl	8001b58 <__swsetup_r>
 8001558:	2800      	cmp	r0, #0
 800155a:	d017      	beq.n	800158c <_vfiprintf_r+0x7c>
 800155c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800155e:	07db      	lsls	r3, r3, #31
 8001560:	d50d      	bpl.n	800157e <_vfiprintf_r+0x6e>
 8001562:	2001      	movs	r0, #1
 8001564:	4240      	negs	r0, r0
 8001566:	b021      	add	sp, #132	; 0x84
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <_vfiprintf_r+0x258>)
 800156c:	429c      	cmp	r4, r3
 800156e:	d101      	bne.n	8001574 <_vfiprintf_r+0x64>
 8001570:	68b4      	ldr	r4, [r6, #8]
 8001572:	e7de      	b.n	8001532 <_vfiprintf_r+0x22>
 8001574:	4b7d      	ldr	r3, [pc, #500]	; (800176c <_vfiprintf_r+0x25c>)
 8001576:	429c      	cmp	r4, r3
 8001578:	d1db      	bne.n	8001532 <_vfiprintf_r+0x22>
 800157a:	68f4      	ldr	r4, [r6, #12]
 800157c:	e7d9      	b.n	8001532 <_vfiprintf_r+0x22>
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	059b      	lsls	r3, r3, #22
 8001582:	d4ee      	bmi.n	8001562 <_vfiprintf_r+0x52>
 8001584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001586:	f000 fd37 	bl	8001ff8 <__retarget_lock_release_recursive>
 800158a:	e7ea      	b.n	8001562 <_vfiprintf_r+0x52>
 800158c:	2300      	movs	r3, #0
 800158e:	ad08      	add	r5, sp, #32
 8001590:	616b      	str	r3, [r5, #20]
 8001592:	3320      	adds	r3, #32
 8001594:	766b      	strb	r3, [r5, #25]
 8001596:	3310      	adds	r3, #16
 8001598:	76ab      	strb	r3, [r5, #26]
 800159a:	9707      	str	r7, [sp, #28]
 800159c:	9f03      	ldr	r7, [sp, #12]
 800159e:	783b      	ldrb	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <_vfiprintf_r+0x98>
 80015a4:	2b25      	cmp	r3, #37	; 0x25
 80015a6:	d14e      	bne.n	8001646 <_vfiprintf_r+0x136>
 80015a8:	9b03      	ldr	r3, [sp, #12]
 80015aa:	1afb      	subs	r3, r7, r3
 80015ac:	9305      	str	r3, [sp, #20]
 80015ae:	9b03      	ldr	r3, [sp, #12]
 80015b0:	429f      	cmp	r7, r3
 80015b2:	d00d      	beq.n	80015d0 <_vfiprintf_r+0xc0>
 80015b4:	9b05      	ldr	r3, [sp, #20]
 80015b6:	0021      	movs	r1, r4
 80015b8:	0030      	movs	r0, r6
 80015ba:	9a03      	ldr	r2, [sp, #12]
 80015bc:	f7ff ff95 	bl	80014ea <__sfputs_r>
 80015c0:	1c43      	adds	r3, r0, #1
 80015c2:	d100      	bne.n	80015c6 <_vfiprintf_r+0xb6>
 80015c4:	e0b5      	b.n	8001732 <_vfiprintf_r+0x222>
 80015c6:	696a      	ldr	r2, [r5, #20]
 80015c8:	9b05      	ldr	r3, [sp, #20]
 80015ca:	4694      	mov	ip, r2
 80015cc:	4463      	add	r3, ip
 80015ce:	616b      	str	r3, [r5, #20]
 80015d0:	783b      	ldrb	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d100      	bne.n	80015d8 <_vfiprintf_r+0xc8>
 80015d6:	e0ac      	b.n	8001732 <_vfiprintf_r+0x222>
 80015d8:	2201      	movs	r2, #1
 80015da:	1c7b      	adds	r3, r7, #1
 80015dc:	9303      	str	r3, [sp, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	4252      	negs	r2, r2
 80015e2:	606a      	str	r2, [r5, #4]
 80015e4:	a904      	add	r1, sp, #16
 80015e6:	3254      	adds	r2, #84	; 0x54
 80015e8:	1852      	adds	r2, r2, r1
 80015ea:	602b      	str	r3, [r5, #0]
 80015ec:	60eb      	str	r3, [r5, #12]
 80015ee:	60ab      	str	r3, [r5, #8]
 80015f0:	7013      	strb	r3, [r2, #0]
 80015f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80015f4:	9b03      	ldr	r3, [sp, #12]
 80015f6:	2205      	movs	r2, #5
 80015f8:	7819      	ldrb	r1, [r3, #0]
 80015fa:	485d      	ldr	r0, [pc, #372]	; (8001770 <_vfiprintf_r+0x260>)
 80015fc:	f000 fd6a 	bl	80020d4 <memchr>
 8001600:	9b03      	ldr	r3, [sp, #12]
 8001602:	1c5f      	adds	r7, r3, #1
 8001604:	2800      	cmp	r0, #0
 8001606:	d120      	bne.n	800164a <_vfiprintf_r+0x13a>
 8001608:	682a      	ldr	r2, [r5, #0]
 800160a:	06d3      	lsls	r3, r2, #27
 800160c:	d504      	bpl.n	8001618 <_vfiprintf_r+0x108>
 800160e:	2353      	movs	r3, #83	; 0x53
 8001610:	a904      	add	r1, sp, #16
 8001612:	185b      	adds	r3, r3, r1
 8001614:	2120      	movs	r1, #32
 8001616:	7019      	strb	r1, [r3, #0]
 8001618:	0713      	lsls	r3, r2, #28
 800161a:	d504      	bpl.n	8001626 <_vfiprintf_r+0x116>
 800161c:	2353      	movs	r3, #83	; 0x53
 800161e:	a904      	add	r1, sp, #16
 8001620:	185b      	adds	r3, r3, r1
 8001622:	212b      	movs	r1, #43	; 0x2b
 8001624:	7019      	strb	r1, [r3, #0]
 8001626:	9b03      	ldr	r3, [sp, #12]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b2a      	cmp	r3, #42	; 0x2a
 800162c:	d016      	beq.n	800165c <_vfiprintf_r+0x14c>
 800162e:	2100      	movs	r1, #0
 8001630:	68eb      	ldr	r3, [r5, #12]
 8001632:	9f03      	ldr	r7, [sp, #12]
 8001634:	783a      	ldrb	r2, [r7, #0]
 8001636:	1c78      	adds	r0, r7, #1
 8001638:	3a30      	subs	r2, #48	; 0x30
 800163a:	4684      	mov	ip, r0
 800163c:	2a09      	cmp	r2, #9
 800163e:	d94f      	bls.n	80016e0 <_vfiprintf_r+0x1d0>
 8001640:	2900      	cmp	r1, #0
 8001642:	d111      	bne.n	8001668 <_vfiprintf_r+0x158>
 8001644:	e017      	b.n	8001676 <_vfiprintf_r+0x166>
 8001646:	3701      	adds	r7, #1
 8001648:	e7a9      	b.n	800159e <_vfiprintf_r+0x8e>
 800164a:	4b49      	ldr	r3, [pc, #292]	; (8001770 <_vfiprintf_r+0x260>)
 800164c:	682a      	ldr	r2, [r5, #0]
 800164e:	1ac0      	subs	r0, r0, r3
 8001650:	2301      	movs	r3, #1
 8001652:	4083      	lsls	r3, r0
 8001654:	4313      	orrs	r3, r2
 8001656:	602b      	str	r3, [r5, #0]
 8001658:	9703      	str	r7, [sp, #12]
 800165a:	e7cb      	b.n	80015f4 <_vfiprintf_r+0xe4>
 800165c:	9b07      	ldr	r3, [sp, #28]
 800165e:	1d19      	adds	r1, r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	9107      	str	r1, [sp, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db01      	blt.n	800166c <_vfiprintf_r+0x15c>
 8001668:	930b      	str	r3, [sp, #44]	; 0x2c
 800166a:	e004      	b.n	8001676 <_vfiprintf_r+0x166>
 800166c:	425b      	negs	r3, r3
 800166e:	60eb      	str	r3, [r5, #12]
 8001670:	2302      	movs	r3, #2
 8001672:	4313      	orrs	r3, r2
 8001674:	602b      	str	r3, [r5, #0]
 8001676:	783b      	ldrb	r3, [r7, #0]
 8001678:	2b2e      	cmp	r3, #46	; 0x2e
 800167a:	d10a      	bne.n	8001692 <_vfiprintf_r+0x182>
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b2a      	cmp	r3, #42	; 0x2a
 8001680:	d137      	bne.n	80016f2 <_vfiprintf_r+0x1e2>
 8001682:	9b07      	ldr	r3, [sp, #28]
 8001684:	3702      	adds	r7, #2
 8001686:	1d1a      	adds	r2, r3, #4
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	9207      	str	r2, [sp, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db2d      	blt.n	80016ec <_vfiprintf_r+0x1dc>
 8001690:	9309      	str	r3, [sp, #36]	; 0x24
 8001692:	2203      	movs	r2, #3
 8001694:	7839      	ldrb	r1, [r7, #0]
 8001696:	4837      	ldr	r0, [pc, #220]	; (8001774 <_vfiprintf_r+0x264>)
 8001698:	f000 fd1c 	bl	80020d4 <memchr>
 800169c:	2800      	cmp	r0, #0
 800169e:	d007      	beq.n	80016b0 <_vfiprintf_r+0x1a0>
 80016a0:	4b34      	ldr	r3, [pc, #208]	; (8001774 <_vfiprintf_r+0x264>)
 80016a2:	682a      	ldr	r2, [r5, #0]
 80016a4:	1ac0      	subs	r0, r0, r3
 80016a6:	2340      	movs	r3, #64	; 0x40
 80016a8:	4083      	lsls	r3, r0
 80016aa:	4313      	orrs	r3, r2
 80016ac:	3701      	adds	r7, #1
 80016ae:	602b      	str	r3, [r5, #0]
 80016b0:	7839      	ldrb	r1, [r7, #0]
 80016b2:	1c7b      	adds	r3, r7, #1
 80016b4:	2206      	movs	r2, #6
 80016b6:	4830      	ldr	r0, [pc, #192]	; (8001778 <_vfiprintf_r+0x268>)
 80016b8:	9303      	str	r3, [sp, #12]
 80016ba:	7629      	strb	r1, [r5, #24]
 80016bc:	f000 fd0a 	bl	80020d4 <memchr>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d045      	beq.n	8001750 <_vfiprintf_r+0x240>
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <_vfiprintf_r+0x26c>)
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d127      	bne.n	800171a <_vfiprintf_r+0x20a>
 80016ca:	2207      	movs	r2, #7
 80016cc:	9b07      	ldr	r3, [sp, #28]
 80016ce:	3307      	adds	r3, #7
 80016d0:	4393      	bics	r3, r2
 80016d2:	3308      	adds	r3, #8
 80016d4:	9307      	str	r3, [sp, #28]
 80016d6:	696b      	ldr	r3, [r5, #20]
 80016d8:	9a04      	ldr	r2, [sp, #16]
 80016da:	189b      	adds	r3, r3, r2
 80016dc:	616b      	str	r3, [r5, #20]
 80016de:	e75d      	b.n	800159c <_vfiprintf_r+0x8c>
 80016e0:	210a      	movs	r1, #10
 80016e2:	434b      	muls	r3, r1
 80016e4:	4667      	mov	r7, ip
 80016e6:	189b      	adds	r3, r3, r2
 80016e8:	3909      	subs	r1, #9
 80016ea:	e7a3      	b.n	8001634 <_vfiprintf_r+0x124>
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	e7ce      	b.n	8001690 <_vfiprintf_r+0x180>
 80016f2:	2300      	movs	r3, #0
 80016f4:	001a      	movs	r2, r3
 80016f6:	3701      	adds	r7, #1
 80016f8:	606b      	str	r3, [r5, #4]
 80016fa:	7839      	ldrb	r1, [r7, #0]
 80016fc:	1c78      	adds	r0, r7, #1
 80016fe:	3930      	subs	r1, #48	; 0x30
 8001700:	4684      	mov	ip, r0
 8001702:	2909      	cmp	r1, #9
 8001704:	d903      	bls.n	800170e <_vfiprintf_r+0x1fe>
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0c3      	beq.n	8001692 <_vfiprintf_r+0x182>
 800170a:	9209      	str	r2, [sp, #36]	; 0x24
 800170c:	e7c1      	b.n	8001692 <_vfiprintf_r+0x182>
 800170e:	230a      	movs	r3, #10
 8001710:	435a      	muls	r2, r3
 8001712:	4667      	mov	r7, ip
 8001714:	1852      	adds	r2, r2, r1
 8001716:	3b09      	subs	r3, #9
 8001718:	e7ef      	b.n	80016fa <_vfiprintf_r+0x1ea>
 800171a:	ab07      	add	r3, sp, #28
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	0022      	movs	r2, r4
 8001720:	0029      	movs	r1, r5
 8001722:	0030      	movs	r0, r6
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <_vfiprintf_r+0x270>)
 8001726:	e000      	b.n	800172a <_vfiprintf_r+0x21a>
 8001728:	bf00      	nop
 800172a:	9004      	str	r0, [sp, #16]
 800172c:	9b04      	ldr	r3, [sp, #16]
 800172e:	3301      	adds	r3, #1
 8001730:	d1d1      	bne.n	80016d6 <_vfiprintf_r+0x1c6>
 8001732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001734:	07db      	lsls	r3, r3, #31
 8001736:	d405      	bmi.n	8001744 <_vfiprintf_r+0x234>
 8001738:	89a3      	ldrh	r3, [r4, #12]
 800173a:	059b      	lsls	r3, r3, #22
 800173c:	d402      	bmi.n	8001744 <_vfiprintf_r+0x234>
 800173e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001740:	f000 fc5a 	bl	8001ff8 <__retarget_lock_release_recursive>
 8001744:	89a3      	ldrh	r3, [r4, #12]
 8001746:	065b      	lsls	r3, r3, #25
 8001748:	d500      	bpl.n	800174c <_vfiprintf_r+0x23c>
 800174a:	e70a      	b.n	8001562 <_vfiprintf_r+0x52>
 800174c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800174e:	e70a      	b.n	8001566 <_vfiprintf_r+0x56>
 8001750:	ab07      	add	r3, sp, #28
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	0022      	movs	r2, r4
 8001756:	0029      	movs	r1, r5
 8001758:	0030      	movs	r0, r6
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <_vfiprintf_r+0x270>)
 800175c:	f000 f882 	bl	8001864 <_printf_i>
 8001760:	e7e3      	b.n	800172a <_vfiprintf_r+0x21a>
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	0800247c 	.word	0x0800247c
 8001768:	0800249c 	.word	0x0800249c
 800176c:	0800245c 	.word	0x0800245c
 8001770:	08002426 	.word	0x08002426
 8001774:	0800242c 	.word	0x0800242c
 8001778:	08002430 	.word	0x08002430
 800177c:	00000000 	.word	0x00000000
 8001780:	080014eb 	.word	0x080014eb

08001784 <_printf_common>:
 8001784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001786:	0015      	movs	r5, r2
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	688a      	ldr	r2, [r1, #8]
 800178c:	690b      	ldr	r3, [r1, #16]
 800178e:	000c      	movs	r4, r1
 8001790:	9000      	str	r0, [sp, #0]
 8001792:	4293      	cmp	r3, r2
 8001794:	da00      	bge.n	8001798 <_printf_common+0x14>
 8001796:	0013      	movs	r3, r2
 8001798:	0022      	movs	r2, r4
 800179a:	602b      	str	r3, [r5, #0]
 800179c:	3243      	adds	r2, #67	; 0x43
 800179e:	7812      	ldrb	r2, [r2, #0]
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d001      	beq.n	80017a8 <_printf_common+0x24>
 80017a4:	3301      	adds	r3, #1
 80017a6:	602b      	str	r3, [r5, #0]
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	069b      	lsls	r3, r3, #26
 80017ac:	d502      	bpl.n	80017b4 <_printf_common+0x30>
 80017ae:	682b      	ldr	r3, [r5, #0]
 80017b0:	3302      	adds	r3, #2
 80017b2:	602b      	str	r3, [r5, #0]
 80017b4:	6822      	ldr	r2, [r4, #0]
 80017b6:	2306      	movs	r3, #6
 80017b8:	0017      	movs	r7, r2
 80017ba:	401f      	ands	r7, r3
 80017bc:	421a      	tst	r2, r3
 80017be:	d027      	beq.n	8001810 <_printf_common+0x8c>
 80017c0:	0023      	movs	r3, r4
 80017c2:	3343      	adds	r3, #67	; 0x43
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	1e5a      	subs	r2, r3, #1
 80017c8:	4193      	sbcs	r3, r2
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	0692      	lsls	r2, r2, #26
 80017ce:	d430      	bmi.n	8001832 <_printf_common+0xae>
 80017d0:	0022      	movs	r2, r4
 80017d2:	9901      	ldr	r1, [sp, #4]
 80017d4:	9800      	ldr	r0, [sp, #0]
 80017d6:	9e08      	ldr	r6, [sp, #32]
 80017d8:	3243      	adds	r2, #67	; 0x43
 80017da:	47b0      	blx	r6
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d025      	beq.n	800182c <_printf_common+0xa8>
 80017e0:	2306      	movs	r3, #6
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	682a      	ldr	r2, [r5, #0]
 80017e6:	68e1      	ldr	r1, [r4, #12]
 80017e8:	2500      	movs	r5, #0
 80017ea:	4003      	ands	r3, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d103      	bne.n	80017f8 <_printf_common+0x74>
 80017f0:	1a8d      	subs	r5, r1, r2
 80017f2:	43eb      	mvns	r3, r5
 80017f4:	17db      	asrs	r3, r3, #31
 80017f6:	401d      	ands	r5, r3
 80017f8:	68a3      	ldr	r3, [r4, #8]
 80017fa:	6922      	ldr	r2, [r4, #16]
 80017fc:	4293      	cmp	r3, r2
 80017fe:	dd01      	ble.n	8001804 <_printf_common+0x80>
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	18ed      	adds	r5, r5, r3
 8001804:	2700      	movs	r7, #0
 8001806:	42bd      	cmp	r5, r7
 8001808:	d120      	bne.n	800184c <_printf_common+0xc8>
 800180a:	2000      	movs	r0, #0
 800180c:	e010      	b.n	8001830 <_printf_common+0xac>
 800180e:	3701      	adds	r7, #1
 8001810:	68e3      	ldr	r3, [r4, #12]
 8001812:	682a      	ldr	r2, [r5, #0]
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	42bb      	cmp	r3, r7
 8001818:	ddd2      	ble.n	80017c0 <_printf_common+0x3c>
 800181a:	0022      	movs	r2, r4
 800181c:	2301      	movs	r3, #1
 800181e:	9901      	ldr	r1, [sp, #4]
 8001820:	9800      	ldr	r0, [sp, #0]
 8001822:	9e08      	ldr	r6, [sp, #32]
 8001824:	3219      	adds	r2, #25
 8001826:	47b0      	blx	r6
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	d1f0      	bne.n	800180e <_printf_common+0x8a>
 800182c:	2001      	movs	r0, #1
 800182e:	4240      	negs	r0, r0
 8001830:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001832:	2030      	movs	r0, #48	; 0x30
 8001834:	18e1      	adds	r1, r4, r3
 8001836:	3143      	adds	r1, #67	; 0x43
 8001838:	7008      	strb	r0, [r1, #0]
 800183a:	0021      	movs	r1, r4
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	3145      	adds	r1, #69	; 0x45
 8001840:	7809      	ldrb	r1, [r1, #0]
 8001842:	18a2      	adds	r2, r4, r2
 8001844:	3243      	adds	r2, #67	; 0x43
 8001846:	3302      	adds	r3, #2
 8001848:	7011      	strb	r1, [r2, #0]
 800184a:	e7c1      	b.n	80017d0 <_printf_common+0x4c>
 800184c:	0022      	movs	r2, r4
 800184e:	2301      	movs	r3, #1
 8001850:	9901      	ldr	r1, [sp, #4]
 8001852:	9800      	ldr	r0, [sp, #0]
 8001854:	9e08      	ldr	r6, [sp, #32]
 8001856:	321a      	adds	r2, #26
 8001858:	47b0      	blx	r6
 800185a:	1c43      	adds	r3, r0, #1
 800185c:	d0e6      	beq.n	800182c <_printf_common+0xa8>
 800185e:	3701      	adds	r7, #1
 8001860:	e7d1      	b.n	8001806 <_printf_common+0x82>
	...

08001864 <_printf_i>:
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	9206      	str	r2, [sp, #24]
 800186a:	000a      	movs	r2, r1
 800186c:	3243      	adds	r2, #67	; 0x43
 800186e:	9307      	str	r3, [sp, #28]
 8001870:	9005      	str	r0, [sp, #20]
 8001872:	9204      	str	r2, [sp, #16]
 8001874:	7e0a      	ldrb	r2, [r1, #24]
 8001876:	000c      	movs	r4, r1
 8001878:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800187a:	2a78      	cmp	r2, #120	; 0x78
 800187c:	d807      	bhi.n	800188e <_printf_i+0x2a>
 800187e:	2a62      	cmp	r2, #98	; 0x62
 8001880:	d809      	bhi.n	8001896 <_printf_i+0x32>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d100      	bne.n	8001888 <_printf_i+0x24>
 8001886:	e0c1      	b.n	8001a0c <_printf_i+0x1a8>
 8001888:	2a58      	cmp	r2, #88	; 0x58
 800188a:	d100      	bne.n	800188e <_printf_i+0x2a>
 800188c:	e08c      	b.n	80019a8 <_printf_i+0x144>
 800188e:	0026      	movs	r6, r4
 8001890:	3642      	adds	r6, #66	; 0x42
 8001892:	7032      	strb	r2, [r6, #0]
 8001894:	e022      	b.n	80018dc <_printf_i+0x78>
 8001896:	0010      	movs	r0, r2
 8001898:	3863      	subs	r0, #99	; 0x63
 800189a:	2815      	cmp	r0, #21
 800189c:	d8f7      	bhi.n	800188e <_printf_i+0x2a>
 800189e:	f7fe fc2f 	bl	8000100 <__gnu_thumb1_case_shi>
 80018a2:	0016      	.short	0x0016
 80018a4:	fff6001f 	.word	0xfff6001f
 80018a8:	fff6fff6 	.word	0xfff6fff6
 80018ac:	001ffff6 	.word	0x001ffff6
 80018b0:	fff6fff6 	.word	0xfff6fff6
 80018b4:	fff6fff6 	.word	0xfff6fff6
 80018b8:	003600a8 	.word	0x003600a8
 80018bc:	fff6009a 	.word	0xfff6009a
 80018c0:	00b9fff6 	.word	0x00b9fff6
 80018c4:	0036fff6 	.word	0x0036fff6
 80018c8:	fff6fff6 	.word	0xfff6fff6
 80018cc:	009e      	.short	0x009e
 80018ce:	0026      	movs	r6, r4
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	3642      	adds	r6, #66	; 0x42
 80018d4:	1d11      	adds	r1, r2, #4
 80018d6:	6019      	str	r1, [r3, #0]
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	7033      	strb	r3, [r6, #0]
 80018dc:	2301      	movs	r3, #1
 80018de:	e0a7      	b.n	8001a30 <_printf_i+0x1cc>
 80018e0:	6808      	ldr	r0, [r1, #0]
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	1d0a      	adds	r2, r1, #4
 80018e6:	0605      	lsls	r5, r0, #24
 80018e8:	d50b      	bpl.n	8001902 <_printf_i+0x9e>
 80018ea:	680d      	ldr	r5, [r1, #0]
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	2d00      	cmp	r5, #0
 80018f0:	da03      	bge.n	80018fa <_printf_i+0x96>
 80018f2:	232d      	movs	r3, #45	; 0x2d
 80018f4:	9a04      	ldr	r2, [sp, #16]
 80018f6:	426d      	negs	r5, r5
 80018f8:	7013      	strb	r3, [r2, #0]
 80018fa:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <_printf_i+0x21c>)
 80018fc:	270a      	movs	r7, #10
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	e01b      	b.n	800193a <_printf_i+0xd6>
 8001902:	680d      	ldr	r5, [r1, #0]
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	0641      	lsls	r1, r0, #25
 8001908:	d5f1      	bpl.n	80018ee <_printf_i+0x8a>
 800190a:	b22d      	sxth	r5, r5
 800190c:	e7ef      	b.n	80018ee <_printf_i+0x8a>
 800190e:	680d      	ldr	r5, [r1, #0]
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	1d08      	adds	r0, r1, #4
 8001914:	6018      	str	r0, [r3, #0]
 8001916:	062e      	lsls	r6, r5, #24
 8001918:	d501      	bpl.n	800191e <_printf_i+0xba>
 800191a:	680d      	ldr	r5, [r1, #0]
 800191c:	e003      	b.n	8001926 <_printf_i+0xc2>
 800191e:	066d      	lsls	r5, r5, #25
 8001920:	d5fb      	bpl.n	800191a <_printf_i+0xb6>
 8001922:	680d      	ldr	r5, [r1, #0]
 8001924:	b2ad      	uxth	r5, r5
 8001926:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <_printf_i+0x21c>)
 8001928:	2708      	movs	r7, #8
 800192a:	9303      	str	r3, [sp, #12]
 800192c:	2a6f      	cmp	r2, #111	; 0x6f
 800192e:	d000      	beq.n	8001932 <_printf_i+0xce>
 8001930:	3702      	adds	r7, #2
 8001932:	0023      	movs	r3, r4
 8001934:	2200      	movs	r2, #0
 8001936:	3343      	adds	r3, #67	; 0x43
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	60a3      	str	r3, [r4, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db03      	blt.n	800194a <_printf_i+0xe6>
 8001942:	2204      	movs	r2, #4
 8001944:	6821      	ldr	r1, [r4, #0]
 8001946:	4391      	bics	r1, r2
 8001948:	6021      	str	r1, [r4, #0]
 800194a:	2d00      	cmp	r5, #0
 800194c:	d102      	bne.n	8001954 <_printf_i+0xf0>
 800194e:	9e04      	ldr	r6, [sp, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <_printf_i+0x10a>
 8001954:	9e04      	ldr	r6, [sp, #16]
 8001956:	0028      	movs	r0, r5
 8001958:	0039      	movs	r1, r7
 800195a:	f7fe fc61 	bl	8000220 <__aeabi_uidivmod>
 800195e:	9b03      	ldr	r3, [sp, #12]
 8001960:	3e01      	subs	r6, #1
 8001962:	5c5b      	ldrb	r3, [r3, r1]
 8001964:	7033      	strb	r3, [r6, #0]
 8001966:	002b      	movs	r3, r5
 8001968:	0005      	movs	r5, r0
 800196a:	429f      	cmp	r7, r3
 800196c:	d9f3      	bls.n	8001956 <_printf_i+0xf2>
 800196e:	2f08      	cmp	r7, #8
 8001970:	d109      	bne.n	8001986 <_printf_i+0x122>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	07db      	lsls	r3, r3, #31
 8001976:	d506      	bpl.n	8001986 <_printf_i+0x122>
 8001978:	6863      	ldr	r3, [r4, #4]
 800197a:	6922      	ldr	r2, [r4, #16]
 800197c:	4293      	cmp	r3, r2
 800197e:	dc02      	bgt.n	8001986 <_printf_i+0x122>
 8001980:	2330      	movs	r3, #48	; 0x30
 8001982:	3e01      	subs	r6, #1
 8001984:	7033      	strb	r3, [r6, #0]
 8001986:	9b04      	ldr	r3, [sp, #16]
 8001988:	1b9b      	subs	r3, r3, r6
 800198a:	6123      	str	r3, [r4, #16]
 800198c:	9b07      	ldr	r3, [sp, #28]
 800198e:	0021      	movs	r1, r4
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	9805      	ldr	r0, [sp, #20]
 8001994:	9b06      	ldr	r3, [sp, #24]
 8001996:	aa09      	add	r2, sp, #36	; 0x24
 8001998:	f7ff fef4 	bl	8001784 <_printf_common>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	d14c      	bne.n	8001a3a <_printf_i+0x1d6>
 80019a0:	2001      	movs	r0, #1
 80019a2:	4240      	negs	r0, r0
 80019a4:	b00b      	add	sp, #44	; 0x2c
 80019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a8:	3145      	adds	r1, #69	; 0x45
 80019aa:	700a      	strb	r2, [r1, #0]
 80019ac:	4a34      	ldr	r2, [pc, #208]	; (8001a80 <_printf_i+0x21c>)
 80019ae:	9203      	str	r2, [sp, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	6821      	ldr	r1, [r4, #0]
 80019b4:	ca20      	ldmia	r2!, {r5}
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	0608      	lsls	r0, r1, #24
 80019ba:	d516      	bpl.n	80019ea <_printf_i+0x186>
 80019bc:	07cb      	lsls	r3, r1, #31
 80019be:	d502      	bpl.n	80019c6 <_printf_i+0x162>
 80019c0:	2320      	movs	r3, #32
 80019c2:	4319      	orrs	r1, r3
 80019c4:	6021      	str	r1, [r4, #0]
 80019c6:	2710      	movs	r7, #16
 80019c8:	2d00      	cmp	r5, #0
 80019ca:	d1b2      	bne.n	8001932 <_printf_i+0xce>
 80019cc:	2320      	movs	r3, #32
 80019ce:	6822      	ldr	r2, [r4, #0]
 80019d0:	439a      	bics	r2, r3
 80019d2:	6022      	str	r2, [r4, #0]
 80019d4:	e7ad      	b.n	8001932 <_printf_i+0xce>
 80019d6:	2220      	movs	r2, #32
 80019d8:	6809      	ldr	r1, [r1, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	6022      	str	r2, [r4, #0]
 80019de:	0022      	movs	r2, r4
 80019e0:	2178      	movs	r1, #120	; 0x78
 80019e2:	3245      	adds	r2, #69	; 0x45
 80019e4:	7011      	strb	r1, [r2, #0]
 80019e6:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <_printf_i+0x220>)
 80019e8:	e7e1      	b.n	80019ae <_printf_i+0x14a>
 80019ea:	0648      	lsls	r0, r1, #25
 80019ec:	d5e6      	bpl.n	80019bc <_printf_i+0x158>
 80019ee:	b2ad      	uxth	r5, r5
 80019f0:	e7e4      	b.n	80019bc <_printf_i+0x158>
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	680d      	ldr	r5, [r1, #0]
 80019f6:	1d10      	adds	r0, r2, #4
 80019f8:	6949      	ldr	r1, [r1, #20]
 80019fa:	6018      	str	r0, [r3, #0]
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	062e      	lsls	r6, r5, #24
 8001a00:	d501      	bpl.n	8001a06 <_printf_i+0x1a2>
 8001a02:	6019      	str	r1, [r3, #0]
 8001a04:	e002      	b.n	8001a0c <_printf_i+0x1a8>
 8001a06:	066d      	lsls	r5, r5, #25
 8001a08:	d5fb      	bpl.n	8001a02 <_printf_i+0x19e>
 8001a0a:	8019      	strh	r1, [r3, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9e04      	ldr	r6, [sp, #16]
 8001a10:	6123      	str	r3, [r4, #16]
 8001a12:	e7bb      	b.n	800198c <_printf_i+0x128>
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	1d11      	adds	r1, r2, #4
 8001a18:	6019      	str	r1, [r3, #0]
 8001a1a:	6816      	ldr	r6, [r2, #0]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	0030      	movs	r0, r6
 8001a20:	6862      	ldr	r2, [r4, #4]
 8001a22:	f000 fb57 	bl	80020d4 <memchr>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d001      	beq.n	8001a2e <_printf_i+0x1ca>
 8001a2a:	1b80      	subs	r0, r0, r6
 8001a2c:	6060      	str	r0, [r4, #4]
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	6123      	str	r3, [r4, #16]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9a04      	ldr	r2, [sp, #16]
 8001a36:	7013      	strb	r3, [r2, #0]
 8001a38:	e7a8      	b.n	800198c <_printf_i+0x128>
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	0032      	movs	r2, r6
 8001a3e:	9906      	ldr	r1, [sp, #24]
 8001a40:	9805      	ldr	r0, [sp, #20]
 8001a42:	9d07      	ldr	r5, [sp, #28]
 8001a44:	47a8      	blx	r5
 8001a46:	1c43      	adds	r3, r0, #1
 8001a48:	d0aa      	beq.n	80019a0 <_printf_i+0x13c>
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	079b      	lsls	r3, r3, #30
 8001a4e:	d415      	bmi.n	8001a7c <_printf_i+0x218>
 8001a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a52:	68e0      	ldr	r0, [r4, #12]
 8001a54:	4298      	cmp	r0, r3
 8001a56:	daa5      	bge.n	80019a4 <_printf_i+0x140>
 8001a58:	0018      	movs	r0, r3
 8001a5a:	e7a3      	b.n	80019a4 <_printf_i+0x140>
 8001a5c:	0022      	movs	r2, r4
 8001a5e:	2301      	movs	r3, #1
 8001a60:	9906      	ldr	r1, [sp, #24]
 8001a62:	9805      	ldr	r0, [sp, #20]
 8001a64:	9e07      	ldr	r6, [sp, #28]
 8001a66:	3219      	adds	r2, #25
 8001a68:	47b0      	blx	r6
 8001a6a:	1c43      	adds	r3, r0, #1
 8001a6c:	d098      	beq.n	80019a0 <_printf_i+0x13c>
 8001a6e:	3501      	adds	r5, #1
 8001a70:	68e3      	ldr	r3, [r4, #12]
 8001a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	42ab      	cmp	r3, r5
 8001a78:	dcf0      	bgt.n	8001a5c <_printf_i+0x1f8>
 8001a7a:	e7e9      	b.n	8001a50 <_printf_i+0x1ec>
 8001a7c:	2500      	movs	r5, #0
 8001a7e:	e7f7      	b.n	8001a70 <_printf_i+0x20c>
 8001a80:	08002437 	.word	0x08002437
 8001a84:	08002448 	.word	0x08002448

08001a88 <_sbrk_r>:
 8001a88:	2300      	movs	r3, #0
 8001a8a:	b570      	push	{r4, r5, r6, lr}
 8001a8c:	4d06      	ldr	r5, [pc, #24]	; (8001aa8 <_sbrk_r+0x20>)
 8001a8e:	0004      	movs	r4, r0
 8001a90:	0008      	movs	r0, r1
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f7fe fd10 	bl	80004b8 <_sbrk>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d103      	bne.n	8001aa4 <_sbrk_r+0x1c>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d000      	beq.n	8001aa4 <_sbrk_r+0x1c>
 8001aa2:	6023      	str	r3, [r4, #0]
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	200000a0 	.word	0x200000a0

08001aac <__swbuf_r>:
 8001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aae:	0005      	movs	r5, r0
 8001ab0:	000e      	movs	r6, r1
 8001ab2:	0014      	movs	r4, r2
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d004      	beq.n	8001ac2 <__swbuf_r+0x16>
 8001ab8:	6983      	ldr	r3, [r0, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <__swbuf_r+0x16>
 8001abe:	f000 f9f9 	bl	8001eb4 <__sinit>
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <__swbuf_r+0xa0>)
 8001ac4:	429c      	cmp	r4, r3
 8001ac6:	d12e      	bne.n	8001b26 <__swbuf_r+0x7a>
 8001ac8:	686c      	ldr	r4, [r5, #4]
 8001aca:	69a3      	ldr	r3, [r4, #24]
 8001acc:	60a3      	str	r3, [r4, #8]
 8001ace:	89a3      	ldrh	r3, [r4, #12]
 8001ad0:	071b      	lsls	r3, r3, #28
 8001ad2:	d532      	bpl.n	8001b3a <__swbuf_r+0x8e>
 8001ad4:	6923      	ldr	r3, [r4, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02f      	beq.n	8001b3a <__swbuf_r+0x8e>
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	6922      	ldr	r2, [r4, #16]
 8001ade:	b2f7      	uxtb	r7, r6
 8001ae0:	1a98      	subs	r0, r3, r2
 8001ae2:	6963      	ldr	r3, [r4, #20]
 8001ae4:	b2f6      	uxtb	r6, r6
 8001ae6:	4283      	cmp	r3, r0
 8001ae8:	dc05      	bgt.n	8001af6 <__swbuf_r+0x4a>
 8001aea:	0021      	movs	r1, r4
 8001aec:	0028      	movs	r0, r5
 8001aee:	f000 f93f 	bl	8001d70 <_fflush_r>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d127      	bne.n	8001b46 <__swbuf_r+0x9a>
 8001af6:	68a3      	ldr	r3, [r4, #8]
 8001af8:	3001      	adds	r0, #1
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60a3      	str	r3, [r4, #8]
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	6022      	str	r2, [r4, #0]
 8001b04:	701f      	strb	r7, [r3, #0]
 8001b06:	6963      	ldr	r3, [r4, #20]
 8001b08:	4283      	cmp	r3, r0
 8001b0a:	d004      	beq.n	8001b16 <__swbuf_r+0x6a>
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	07db      	lsls	r3, r3, #31
 8001b10:	d507      	bpl.n	8001b22 <__swbuf_r+0x76>
 8001b12:	2e0a      	cmp	r6, #10
 8001b14:	d105      	bne.n	8001b22 <__swbuf_r+0x76>
 8001b16:	0021      	movs	r1, r4
 8001b18:	0028      	movs	r0, r5
 8001b1a:	f000 f929 	bl	8001d70 <_fflush_r>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d111      	bne.n	8001b46 <__swbuf_r+0x9a>
 8001b22:	0030      	movs	r0, r6
 8001b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <__swbuf_r+0xa4>)
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	d101      	bne.n	8001b30 <__swbuf_r+0x84>
 8001b2c:	68ac      	ldr	r4, [r5, #8]
 8001b2e:	e7cc      	b.n	8001aca <__swbuf_r+0x1e>
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <__swbuf_r+0xa8>)
 8001b32:	429c      	cmp	r4, r3
 8001b34:	d1c9      	bne.n	8001aca <__swbuf_r+0x1e>
 8001b36:	68ec      	ldr	r4, [r5, #12]
 8001b38:	e7c7      	b.n	8001aca <__swbuf_r+0x1e>
 8001b3a:	0021      	movs	r1, r4
 8001b3c:	0028      	movs	r0, r5
 8001b3e:	f000 f80b 	bl	8001b58 <__swsetup_r>
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d0c9      	beq.n	8001ada <__swbuf_r+0x2e>
 8001b46:	2601      	movs	r6, #1
 8001b48:	4276      	negs	r6, r6
 8001b4a:	e7ea      	b.n	8001b22 <__swbuf_r+0x76>
 8001b4c:	0800247c 	.word	0x0800247c
 8001b50:	0800249c 	.word	0x0800249c
 8001b54:	0800245c 	.word	0x0800245c

08001b58 <__swsetup_r>:
 8001b58:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <__swsetup_r+0xe0>)
 8001b5a:	b570      	push	{r4, r5, r6, lr}
 8001b5c:	681d      	ldr	r5, [r3, #0]
 8001b5e:	0006      	movs	r6, r0
 8001b60:	000c      	movs	r4, r1
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	d005      	beq.n	8001b72 <__swsetup_r+0x1a>
 8001b66:	69ab      	ldr	r3, [r5, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <__swsetup_r+0x1a>
 8001b6c:	0028      	movs	r0, r5
 8001b6e:	f000 f9a1 	bl	8001eb4 <__sinit>
 8001b72:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <__swsetup_r+0xe4>)
 8001b74:	429c      	cmp	r4, r3
 8001b76:	d10f      	bne.n	8001b98 <__swsetup_r+0x40>
 8001b78:	686c      	ldr	r4, [r5, #4]
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	5ee2      	ldrsh	r2, [r4, r3]
 8001b7e:	b293      	uxth	r3, r2
 8001b80:	0711      	lsls	r1, r2, #28
 8001b82:	d42d      	bmi.n	8001be0 <__swsetup_r+0x88>
 8001b84:	06d9      	lsls	r1, r3, #27
 8001b86:	d411      	bmi.n	8001bac <__swsetup_r+0x54>
 8001b88:	2309      	movs	r3, #9
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	6033      	str	r3, [r6, #0]
 8001b8e:	3337      	adds	r3, #55	; 0x37
 8001b90:	4313      	orrs	r3, r2
 8001b92:	81a3      	strh	r3, [r4, #12]
 8001b94:	4240      	negs	r0, r0
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <__swsetup_r+0xe8>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d101      	bne.n	8001ba2 <__swsetup_r+0x4a>
 8001b9e:	68ac      	ldr	r4, [r5, #8]
 8001ba0:	e7eb      	b.n	8001b7a <__swsetup_r+0x22>
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <__swsetup_r+0xec>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	d1e8      	bne.n	8001b7a <__swsetup_r+0x22>
 8001ba8:	68ec      	ldr	r4, [r5, #12]
 8001baa:	e7e6      	b.n	8001b7a <__swsetup_r+0x22>
 8001bac:	075b      	lsls	r3, r3, #29
 8001bae:	d513      	bpl.n	8001bd8 <__swsetup_r+0x80>
 8001bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d008      	beq.n	8001bc8 <__swsetup_r+0x70>
 8001bb6:	0023      	movs	r3, r4
 8001bb8:	3344      	adds	r3, #68	; 0x44
 8001bba:	4299      	cmp	r1, r3
 8001bbc:	d002      	beq.n	8001bc4 <__swsetup_r+0x6c>
 8001bbe:	0030      	movs	r0, r6
 8001bc0:	f7ff fb9c 	bl	80012fc <_free_r>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6363      	str	r3, [r4, #52]	; 0x34
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	4393      	bics	r3, r2
 8001bce:	81a3      	strh	r3, [r4, #12]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6063      	str	r3, [r4, #4]
 8001bd4:	6923      	ldr	r3, [r4, #16]
 8001bd6:	6023      	str	r3, [r4, #0]
 8001bd8:	2308      	movs	r3, #8
 8001bda:	89a2      	ldrh	r2, [r4, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	81a3      	strh	r3, [r4, #12]
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10b      	bne.n	8001bfe <__swsetup_r+0xa6>
 8001be6:	21a0      	movs	r1, #160	; 0xa0
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	0089      	lsls	r1, r1, #2
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d003      	beq.n	8001bfe <__swsetup_r+0xa6>
 8001bf6:	0021      	movs	r1, r4
 8001bf8:	0030      	movs	r0, r6
 8001bfa:	f000 fa27 	bl	800204c <__smakebuf_r>
 8001bfe:	220c      	movs	r2, #12
 8001c00:	5ea3      	ldrsh	r3, [r4, r2]
 8001c02:	2001      	movs	r0, #1
 8001c04:	001a      	movs	r2, r3
 8001c06:	b299      	uxth	r1, r3
 8001c08:	4002      	ands	r2, r0
 8001c0a:	4203      	tst	r3, r0
 8001c0c:	d00f      	beq.n	8001c2e <__swsetup_r+0xd6>
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60a2      	str	r2, [r4, #8]
 8001c12:	6962      	ldr	r2, [r4, #20]
 8001c14:	4252      	negs	r2, r2
 8001c16:	61a2      	str	r2, [r4, #24]
 8001c18:	2000      	movs	r0, #0
 8001c1a:	6922      	ldr	r2, [r4, #16]
 8001c1c:	4282      	cmp	r2, r0
 8001c1e:	d1ba      	bne.n	8001b96 <__swsetup_r+0x3e>
 8001c20:	060a      	lsls	r2, r1, #24
 8001c22:	d5b8      	bpl.n	8001b96 <__swsetup_r+0x3e>
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	4313      	orrs	r3, r2
 8001c28:	81a3      	strh	r3, [r4, #12]
 8001c2a:	3801      	subs	r0, #1
 8001c2c:	e7b3      	b.n	8001b96 <__swsetup_r+0x3e>
 8001c2e:	0788      	lsls	r0, r1, #30
 8001c30:	d400      	bmi.n	8001c34 <__swsetup_r+0xdc>
 8001c32:	6962      	ldr	r2, [r4, #20]
 8001c34:	60a2      	str	r2, [r4, #8]
 8001c36:	e7ef      	b.n	8001c18 <__swsetup_r+0xc0>
 8001c38:	2000000c 	.word	0x2000000c
 8001c3c:	0800247c 	.word	0x0800247c
 8001c40:	0800249c 	.word	0x0800249c
 8001c44:	0800245c 	.word	0x0800245c

08001c48 <abort>:
 8001c48:	2006      	movs	r0, #6
 8001c4a:	b510      	push	{r4, lr}
 8001c4c:	f000 fa88 	bl	8002160 <raise>
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7fe fbc0 	bl	80003d6 <_exit>
	...

08001c58 <__sflush_r>:
 8001c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c5a:	898b      	ldrh	r3, [r1, #12]
 8001c5c:	0005      	movs	r5, r0
 8001c5e:	000c      	movs	r4, r1
 8001c60:	071a      	lsls	r2, r3, #28
 8001c62:	d45f      	bmi.n	8001d24 <__sflush_r+0xcc>
 8001c64:	684a      	ldr	r2, [r1, #4]
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	dc04      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c6a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	dc01      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c70:	2000      	movs	r0, #0
 8001c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001c74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001c76:	2f00      	cmp	r7, #0
 8001c78:	d0fa      	beq.n	8001c70 <__sflush_r+0x18>
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2180      	movs	r1, #128	; 0x80
 8001c7e:	682e      	ldr	r6, [r5, #0]
 8001c80:	602a      	str	r2, [r5, #0]
 8001c82:	001a      	movs	r2, r3
 8001c84:	0149      	lsls	r1, r1, #5
 8001c86:	400a      	ands	r2, r1
 8001c88:	420b      	tst	r3, r1
 8001c8a:	d034      	beq.n	8001cf6 <__sflush_r+0x9e>
 8001c8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c8e:	89a3      	ldrh	r3, [r4, #12]
 8001c90:	075b      	lsls	r3, r3, #29
 8001c92:	d506      	bpl.n	8001ca2 <__sflush_r+0x4a>
 8001c94:	6863      	ldr	r3, [r4, #4]
 8001c96:	1ac0      	subs	r0, r0, r3
 8001c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <__sflush_r+0x4a>
 8001c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca0:	1ac0      	subs	r0, r0, r3
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	6a21      	ldr	r1, [r4, #32]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	0028      	movs	r0, r5
 8001caa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001cac:	47b8      	blx	r7
 8001cae:	89a1      	ldrh	r1, [r4, #12]
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d106      	bne.n	8001cc2 <__sflush_r+0x6a>
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	2b1d      	cmp	r3, #29
 8001cb8:	d831      	bhi.n	8001d1e <__sflush_r+0xc6>
 8001cba:	4a2c      	ldr	r2, [pc, #176]	; (8001d6c <__sflush_r+0x114>)
 8001cbc:	40da      	lsrs	r2, r3
 8001cbe:	07d3      	lsls	r3, r2, #31
 8001cc0:	d52d      	bpl.n	8001d1e <__sflush_r+0xc6>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	6923      	ldr	r3, [r4, #16]
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	04cb      	lsls	r3, r1, #19
 8001ccc:	d505      	bpl.n	8001cda <__sflush_r+0x82>
 8001cce:	1c43      	adds	r3, r0, #1
 8001cd0:	d102      	bne.n	8001cd8 <__sflush_r+0x80>
 8001cd2:	682b      	ldr	r3, [r5, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d100      	bne.n	8001cda <__sflush_r+0x82>
 8001cd8:	6560      	str	r0, [r4, #84]	; 0x54
 8001cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cdc:	602e      	str	r6, [r5, #0]
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d0c6      	beq.n	8001c70 <__sflush_r+0x18>
 8001ce2:	0023      	movs	r3, r4
 8001ce4:	3344      	adds	r3, #68	; 0x44
 8001ce6:	4299      	cmp	r1, r3
 8001ce8:	d002      	beq.n	8001cf0 <__sflush_r+0x98>
 8001cea:	0028      	movs	r0, r5
 8001cec:	f7ff fb06 	bl	80012fc <_free_r>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8001cf4:	e7bd      	b.n	8001c72 <__sflush_r+0x1a>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	0028      	movs	r0, r5
 8001cfa:	6a21      	ldr	r1, [r4, #32]
 8001cfc:	47b8      	blx	r7
 8001cfe:	1c43      	adds	r3, r0, #1
 8001d00:	d1c5      	bne.n	8001c8e <__sflush_r+0x36>
 8001d02:	682b      	ldr	r3, [r5, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0c2      	beq.n	8001c8e <__sflush_r+0x36>
 8001d08:	2b1d      	cmp	r3, #29
 8001d0a:	d001      	beq.n	8001d10 <__sflush_r+0xb8>
 8001d0c:	2b16      	cmp	r3, #22
 8001d0e:	d101      	bne.n	8001d14 <__sflush_r+0xbc>
 8001d10:	602e      	str	r6, [r5, #0]
 8001d12:	e7ad      	b.n	8001c70 <__sflush_r+0x18>
 8001d14:	2340      	movs	r3, #64	; 0x40
 8001d16:	89a2      	ldrh	r2, [r4, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	81a3      	strh	r3, [r4, #12]
 8001d1c:	e7a9      	b.n	8001c72 <__sflush_r+0x1a>
 8001d1e:	2340      	movs	r3, #64	; 0x40
 8001d20:	430b      	orrs	r3, r1
 8001d22:	e7fa      	b.n	8001d1a <__sflush_r+0xc2>
 8001d24:	690f      	ldr	r7, [r1, #16]
 8001d26:	2f00      	cmp	r7, #0
 8001d28:	d0a2      	beq.n	8001c70 <__sflush_r+0x18>
 8001d2a:	680a      	ldr	r2, [r1, #0]
 8001d2c:	600f      	str	r7, [r1, #0]
 8001d2e:	1bd2      	subs	r2, r2, r7
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	079b      	lsls	r3, r3, #30
 8001d36:	d100      	bne.n	8001d3a <__sflush_r+0xe2>
 8001d38:	694a      	ldr	r2, [r1, #20]
 8001d3a:	60a2      	str	r2, [r4, #8]
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	dc00      	bgt.n	8001d44 <__sflush_r+0xec>
 8001d42:	e795      	b.n	8001c70 <__sflush_r+0x18>
 8001d44:	003a      	movs	r2, r7
 8001d46:	0028      	movs	r0, r5
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	6a21      	ldr	r1, [r4, #32]
 8001d4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d4e:	47b0      	blx	r6
 8001d50:	2800      	cmp	r0, #0
 8001d52:	dc06      	bgt.n	8001d62 <__sflush_r+0x10a>
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	2001      	movs	r0, #1
 8001d58:	89a2      	ldrh	r2, [r4, #12]
 8001d5a:	4240      	negs	r0, r0
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	81a3      	strh	r3, [r4, #12]
 8001d60:	e787      	b.n	8001c72 <__sflush_r+0x1a>
 8001d62:	9b01      	ldr	r3, [sp, #4]
 8001d64:	183f      	adds	r7, r7, r0
 8001d66:	1a1b      	subs	r3, r3, r0
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	e7e7      	b.n	8001d3c <__sflush_r+0xe4>
 8001d6c:	20400001 	.word	0x20400001

08001d70 <_fflush_r>:
 8001d70:	690b      	ldr	r3, [r1, #16]
 8001d72:	b570      	push	{r4, r5, r6, lr}
 8001d74:	0005      	movs	r5, r0
 8001d76:	000c      	movs	r4, r1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_fflush_r+0x12>
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	0028      	movs	r0, r5
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d004      	beq.n	8001d90 <_fflush_r+0x20>
 8001d86:	6983      	ldr	r3, [r0, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <_fflush_r+0x20>
 8001d8c:	f000 f892 	bl	8001eb4 <__sinit>
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <_fflush_r+0x74>)
 8001d92:	429c      	cmp	r4, r3
 8001d94:	d11b      	bne.n	8001dce <_fflush_r+0x5e>
 8001d96:	686c      	ldr	r4, [r5, #4]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	5ea3      	ldrsh	r3, [r4, r2]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ed      	beq.n	8001d7c <_fflush_r+0xc>
 8001da0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001da2:	07d2      	lsls	r2, r2, #31
 8001da4:	d404      	bmi.n	8001db0 <_fflush_r+0x40>
 8001da6:	059b      	lsls	r3, r3, #22
 8001da8:	d402      	bmi.n	8001db0 <_fflush_r+0x40>
 8001daa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dac:	f000 f923 	bl	8001ff6 <__retarget_lock_acquire_recursive>
 8001db0:	0028      	movs	r0, r5
 8001db2:	0021      	movs	r1, r4
 8001db4:	f7ff ff50 	bl	8001c58 <__sflush_r>
 8001db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dba:	0005      	movs	r5, r0
 8001dbc:	07db      	lsls	r3, r3, #31
 8001dbe:	d4de      	bmi.n	8001d7e <_fflush_r+0xe>
 8001dc0:	89a3      	ldrh	r3, [r4, #12]
 8001dc2:	059b      	lsls	r3, r3, #22
 8001dc4:	d4db      	bmi.n	8001d7e <_fflush_r+0xe>
 8001dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dc8:	f000 f916 	bl	8001ff8 <__retarget_lock_release_recursive>
 8001dcc:	e7d7      	b.n	8001d7e <_fflush_r+0xe>
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <_fflush_r+0x78>)
 8001dd0:	429c      	cmp	r4, r3
 8001dd2:	d101      	bne.n	8001dd8 <_fflush_r+0x68>
 8001dd4:	68ac      	ldr	r4, [r5, #8]
 8001dd6:	e7df      	b.n	8001d98 <_fflush_r+0x28>
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <_fflush_r+0x7c>)
 8001dda:	429c      	cmp	r4, r3
 8001ddc:	d1dc      	bne.n	8001d98 <_fflush_r+0x28>
 8001dde:	68ec      	ldr	r4, [r5, #12]
 8001de0:	e7da      	b.n	8001d98 <_fflush_r+0x28>
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	0800247c 	.word	0x0800247c
 8001de8:	0800249c 	.word	0x0800249c
 8001dec:	0800245c 	.word	0x0800245c

08001df0 <std>:
 8001df0:	2300      	movs	r3, #0
 8001df2:	b510      	push	{r4, lr}
 8001df4:	0004      	movs	r4, r0
 8001df6:	6003      	str	r3, [r0, #0]
 8001df8:	6043      	str	r3, [r0, #4]
 8001dfa:	6083      	str	r3, [r0, #8]
 8001dfc:	8181      	strh	r1, [r0, #12]
 8001dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8001e00:	0019      	movs	r1, r3
 8001e02:	81c2      	strh	r2, [r0, #14]
 8001e04:	6103      	str	r3, [r0, #16]
 8001e06:	6143      	str	r3, [r0, #20]
 8001e08:	6183      	str	r3, [r0, #24]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	305c      	adds	r0, #92	; 0x5c
 8001e0e:	f7ff f9f7 	bl	8001200 <memset>
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <std+0x38>)
 8001e14:	6224      	str	r4, [r4, #32]
 8001e16:	6263      	str	r3, [r4, #36]	; 0x24
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <std+0x3c>)
 8001e1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <std+0x40>)
 8001e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <std+0x44>)
 8001e22:	6323      	str	r3, [r4, #48]	; 0x30
 8001e24:	bd10      	pop	{r4, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	080021a1 	.word	0x080021a1
 8001e2c:	080021c9 	.word	0x080021c9
 8001e30:	08002201 	.word	0x08002201
 8001e34:	0800222d 	.word	0x0800222d

08001e38 <_cleanup_r>:
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4902      	ldr	r1, [pc, #8]	; (8001e44 <_cleanup_r+0xc>)
 8001e3c:	f000 f8ba 	bl	8001fb4 <_fwalk_reent>
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	08001d71 	.word	0x08001d71

08001e48 <__sfmoreglue>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	2568      	movs	r5, #104	; 0x68
 8001e4c:	1e4a      	subs	r2, r1, #1
 8001e4e:	4355      	muls	r5, r2
 8001e50:	000e      	movs	r6, r1
 8001e52:	0029      	movs	r1, r5
 8001e54:	3174      	adds	r1, #116	; 0x74
 8001e56:	f7ff fabd 	bl	80013d4 <_malloc_r>
 8001e5a:	1e04      	subs	r4, r0, #0
 8001e5c:	d008      	beq.n	8001e70 <__sfmoreglue+0x28>
 8001e5e:	2100      	movs	r1, #0
 8001e60:	002a      	movs	r2, r5
 8001e62:	6001      	str	r1, [r0, #0]
 8001e64:	6046      	str	r6, [r0, #4]
 8001e66:	300c      	adds	r0, #12
 8001e68:	60a0      	str	r0, [r4, #8]
 8001e6a:	3268      	adds	r2, #104	; 0x68
 8001e6c:	f7ff f9c8 	bl	8001200 <memset>
 8001e70:	0020      	movs	r0, r4
 8001e72:	bd70      	pop	{r4, r5, r6, pc}

08001e74 <__sfp_lock_acquire>:
 8001e74:	b510      	push	{r4, lr}
 8001e76:	4802      	ldr	r0, [pc, #8]	; (8001e80 <__sfp_lock_acquire+0xc>)
 8001e78:	f000 f8bd 	bl	8001ff6 <__retarget_lock_acquire_recursive>
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	2000009d 	.word	0x2000009d

08001e84 <__sfp_lock_release>:
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <__sfp_lock_release+0xc>)
 8001e88:	f000 f8b6 	bl	8001ff8 <__retarget_lock_release_recursive>
 8001e8c:	bd10      	pop	{r4, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	2000009d 	.word	0x2000009d

08001e94 <__sinit_lock_acquire>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <__sinit_lock_acquire+0xc>)
 8001e98:	f000 f8ad 	bl	8001ff6 <__retarget_lock_acquire_recursive>
 8001e9c:	bd10      	pop	{r4, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	2000009e 	.word	0x2000009e

08001ea4 <__sinit_lock_release>:
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <__sinit_lock_release+0xc>)
 8001ea8:	f000 f8a6 	bl	8001ff8 <__retarget_lock_release_recursive>
 8001eac:	bd10      	pop	{r4, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	2000009e 	.word	0x2000009e

08001eb4 <__sinit>:
 8001eb4:	b513      	push	{r0, r1, r4, lr}
 8001eb6:	0004      	movs	r4, r0
 8001eb8:	f7ff ffec 	bl	8001e94 <__sinit_lock_acquire>
 8001ebc:	69a3      	ldr	r3, [r4, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <__sinit+0x14>
 8001ec2:	f7ff ffef 	bl	8001ea4 <__sinit_lock_release>
 8001ec6:	bd13      	pop	{r0, r1, r4, pc}
 8001ec8:	64a3      	str	r3, [r4, #72]	; 0x48
 8001eca:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <__sinit+0x68>)
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <__sinit+0x6c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	42a3      	cmp	r3, r4
 8001eda:	d101      	bne.n	8001ee0 <__sinit+0x2c>
 8001edc:	2301      	movs	r3, #1
 8001ede:	61a3      	str	r3, [r4, #24]
 8001ee0:	0020      	movs	r0, r4
 8001ee2:	f000 f81f 	bl	8001f24 <__sfp>
 8001ee6:	6060      	str	r0, [r4, #4]
 8001ee8:	0020      	movs	r0, r4
 8001eea:	f000 f81b 	bl	8001f24 <__sfp>
 8001eee:	60a0      	str	r0, [r4, #8]
 8001ef0:	0020      	movs	r0, r4
 8001ef2:	f000 f817 	bl	8001f24 <__sfp>
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2104      	movs	r1, #4
 8001efa:	60e0      	str	r0, [r4, #12]
 8001efc:	6860      	ldr	r0, [r4, #4]
 8001efe:	f7ff ff77 	bl	8001df0 <std>
 8001f02:	2201      	movs	r2, #1
 8001f04:	2109      	movs	r1, #9
 8001f06:	68a0      	ldr	r0, [r4, #8]
 8001f08:	f7ff ff72 	bl	8001df0 <std>
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	2112      	movs	r1, #18
 8001f10:	68e0      	ldr	r0, [r4, #12]
 8001f12:	f7ff ff6d 	bl	8001df0 <std>
 8001f16:	2301      	movs	r3, #1
 8001f18:	61a3      	str	r3, [r4, #24]
 8001f1a:	e7d2      	b.n	8001ec2 <__sinit+0xe>
 8001f1c:	08002374 	.word	0x08002374
 8001f20:	08001e39 	.word	0x08001e39

08001f24 <__sfp>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	0007      	movs	r7, r0
 8001f28:	f7ff ffa4 	bl	8001e74 <__sfp_lock_acquire>
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <__sfp+0x88>)
 8001f2e:	681e      	ldr	r6, [r3, #0]
 8001f30:	69b3      	ldr	r3, [r6, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <__sfp+0x18>
 8001f36:	0030      	movs	r0, r6
 8001f38:	f7ff ffbc 	bl	8001eb4 <__sinit>
 8001f3c:	3648      	adds	r6, #72	; 0x48
 8001f3e:	68b4      	ldr	r4, [r6, #8]
 8001f40:	6873      	ldr	r3, [r6, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	d504      	bpl.n	8001f50 <__sfp+0x2c>
 8001f46:	6833      	ldr	r3, [r6, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d022      	beq.n	8001f92 <__sfp+0x6e>
 8001f4c:	6836      	ldr	r6, [r6, #0]
 8001f4e:	e7f6      	b.n	8001f3e <__sfp+0x1a>
 8001f50:	220c      	movs	r2, #12
 8001f52:	5ea5      	ldrsh	r5, [r4, r2]
 8001f54:	2d00      	cmp	r5, #0
 8001f56:	d11a      	bne.n	8001f8e <__sfp+0x6a>
 8001f58:	0020      	movs	r0, r4
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <__sfp+0x8c>)
 8001f5c:	3058      	adds	r0, #88	; 0x58
 8001f5e:	60e3      	str	r3, [r4, #12]
 8001f60:	6665      	str	r5, [r4, #100]	; 0x64
 8001f62:	f000 f847 	bl	8001ff4 <__retarget_lock_init_recursive>
 8001f66:	f7ff ff8d 	bl	8001e84 <__sfp_lock_release>
 8001f6a:	0020      	movs	r0, r4
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	0029      	movs	r1, r5
 8001f70:	6025      	str	r5, [r4, #0]
 8001f72:	60a5      	str	r5, [r4, #8]
 8001f74:	6065      	str	r5, [r4, #4]
 8001f76:	6125      	str	r5, [r4, #16]
 8001f78:	6165      	str	r5, [r4, #20]
 8001f7a:	61a5      	str	r5, [r4, #24]
 8001f7c:	305c      	adds	r0, #92	; 0x5c
 8001f7e:	f7ff f93f 	bl	8001200 <memset>
 8001f82:	6365      	str	r5, [r4, #52]	; 0x34
 8001f84:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f86:	64a5      	str	r5, [r4, #72]	; 0x48
 8001f88:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8e:	3468      	adds	r4, #104	; 0x68
 8001f90:	e7d7      	b.n	8001f42 <__sfp+0x1e>
 8001f92:	2104      	movs	r1, #4
 8001f94:	0038      	movs	r0, r7
 8001f96:	f7ff ff57 	bl	8001e48 <__sfmoreglue>
 8001f9a:	1e04      	subs	r4, r0, #0
 8001f9c:	6030      	str	r0, [r6, #0]
 8001f9e:	d1d5      	bne.n	8001f4c <__sfp+0x28>
 8001fa0:	f7ff ff70 	bl	8001e84 <__sfp_lock_release>
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	e7ef      	b.n	8001f8a <__sfp+0x66>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	08002374 	.word	0x08002374
 8001fb0:	ffff0001 	.word	0xffff0001

08001fb4 <_fwalk_reent>:
 8001fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	0006      	movs	r6, r0
 8001fba:	2700      	movs	r7, #0
 8001fbc:	9101      	str	r1, [sp, #4]
 8001fbe:	3448      	adds	r4, #72	; 0x48
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	68a5      	ldr	r5, [r4, #8]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	9b00      	ldr	r3, [sp, #0]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	d504      	bpl.n	8001fd8 <_fwalk_reent+0x24>
 8001fce:	6824      	ldr	r4, [r4, #0]
 8001fd0:	2c00      	cmp	r4, #0
 8001fd2:	d1f5      	bne.n	8001fc0 <_fwalk_reent+0xc>
 8001fd4:	0038      	movs	r0, r7
 8001fd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fd8:	89ab      	ldrh	r3, [r5, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d908      	bls.n	8001ff0 <_fwalk_reent+0x3c>
 8001fde:	220e      	movs	r2, #14
 8001fe0:	5eab      	ldrsh	r3, [r5, r2]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d004      	beq.n	8001ff0 <_fwalk_reent+0x3c>
 8001fe6:	0029      	movs	r1, r5
 8001fe8:	0030      	movs	r0, r6
 8001fea:	9b01      	ldr	r3, [sp, #4]
 8001fec:	4798      	blx	r3
 8001fee:	4307      	orrs	r7, r0
 8001ff0:	3568      	adds	r5, #104	; 0x68
 8001ff2:	e7e8      	b.n	8001fc6 <_fwalk_reent+0x12>

08001ff4 <__retarget_lock_init_recursive>:
 8001ff4:	4770      	bx	lr

08001ff6 <__retarget_lock_acquire_recursive>:
 8001ff6:	4770      	bx	lr

08001ff8 <__retarget_lock_release_recursive>:
 8001ff8:	4770      	bx	lr
	...

08001ffc <__swhatbuf_r>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	000e      	movs	r6, r1
 8002000:	001d      	movs	r5, r3
 8002002:	230e      	movs	r3, #14
 8002004:	5ec9      	ldrsh	r1, [r1, r3]
 8002006:	0014      	movs	r4, r2
 8002008:	b096      	sub	sp, #88	; 0x58
 800200a:	2900      	cmp	r1, #0
 800200c:	da08      	bge.n	8002020 <__swhatbuf_r+0x24>
 800200e:	220c      	movs	r2, #12
 8002010:	5eb3      	ldrsh	r3, [r6, r2]
 8002012:	2200      	movs	r2, #0
 8002014:	602a      	str	r2, [r5, #0]
 8002016:	061b      	lsls	r3, r3, #24
 8002018:	d411      	bmi.n	800203e <__swhatbuf_r+0x42>
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	e00f      	b.n	8002040 <__swhatbuf_r+0x44>
 8002020:	466a      	mov	r2, sp
 8002022:	f000 f92f 	bl	8002284 <_fstat_r>
 8002026:	2800      	cmp	r0, #0
 8002028:	dbf1      	blt.n	800200e <__swhatbuf_r+0x12>
 800202a:	23f0      	movs	r3, #240	; 0xf0
 800202c:	9901      	ldr	r1, [sp, #4]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	4019      	ands	r1, r3
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <__swhatbuf_r+0x4c>)
 8002034:	18c9      	adds	r1, r1, r3
 8002036:	424b      	negs	r3, r1
 8002038:	4159      	adcs	r1, r3
 800203a:	6029      	str	r1, [r5, #0]
 800203c:	e7ed      	b.n	800201a <__swhatbuf_r+0x1e>
 800203e:	2340      	movs	r3, #64	; 0x40
 8002040:	2000      	movs	r0, #0
 8002042:	6023      	str	r3, [r4, #0]
 8002044:	b016      	add	sp, #88	; 0x58
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	ffffe000 	.word	0xffffe000

0800204c <__smakebuf_r>:
 800204c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800204e:	2602      	movs	r6, #2
 8002050:	898b      	ldrh	r3, [r1, #12]
 8002052:	0005      	movs	r5, r0
 8002054:	000c      	movs	r4, r1
 8002056:	4233      	tst	r3, r6
 8002058:	d006      	beq.n	8002068 <__smakebuf_r+0x1c>
 800205a:	0023      	movs	r3, r4
 800205c:	3347      	adds	r3, #71	; 0x47
 800205e:	6023      	str	r3, [r4, #0]
 8002060:	6123      	str	r3, [r4, #16]
 8002062:	2301      	movs	r3, #1
 8002064:	6163      	str	r3, [r4, #20]
 8002066:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002068:	466a      	mov	r2, sp
 800206a:	ab01      	add	r3, sp, #4
 800206c:	f7ff ffc6 	bl	8001ffc <__swhatbuf_r>
 8002070:	9900      	ldr	r1, [sp, #0]
 8002072:	0007      	movs	r7, r0
 8002074:	0028      	movs	r0, r5
 8002076:	f7ff f9ad 	bl	80013d4 <_malloc_r>
 800207a:	2800      	cmp	r0, #0
 800207c:	d108      	bne.n	8002090 <__smakebuf_r+0x44>
 800207e:	220c      	movs	r2, #12
 8002080:	5ea3      	ldrsh	r3, [r4, r2]
 8002082:	059a      	lsls	r2, r3, #22
 8002084:	d4ef      	bmi.n	8002066 <__smakebuf_r+0x1a>
 8002086:	2203      	movs	r2, #3
 8002088:	4393      	bics	r3, r2
 800208a:	431e      	orrs	r6, r3
 800208c:	81a6      	strh	r6, [r4, #12]
 800208e:	e7e4      	b.n	800205a <__smakebuf_r+0xe>
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <__smakebuf_r+0x84>)
 8002092:	62ab      	str	r3, [r5, #40]	; 0x28
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	89a2      	ldrh	r2, [r4, #12]
 8002098:	6020      	str	r0, [r4, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	81a3      	strh	r3, [r4, #12]
 800209e:	9b00      	ldr	r3, [sp, #0]
 80020a0:	6120      	str	r0, [r4, #16]
 80020a2:	6163      	str	r3, [r4, #20]
 80020a4:	9b01      	ldr	r3, [sp, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <__smakebuf_r+0x7a>
 80020aa:	0028      	movs	r0, r5
 80020ac:	230e      	movs	r3, #14
 80020ae:	5ee1      	ldrsh	r1, [r4, r3]
 80020b0:	f000 f8fa 	bl	80022a8 <_isatty_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d006      	beq.n	80020c6 <__smakebuf_r+0x7a>
 80020b8:	2203      	movs	r2, #3
 80020ba:	89a3      	ldrh	r3, [r4, #12]
 80020bc:	4393      	bics	r3, r2
 80020be:	001a      	movs	r2, r3
 80020c0:	2301      	movs	r3, #1
 80020c2:	4313      	orrs	r3, r2
 80020c4:	81a3      	strh	r3, [r4, #12]
 80020c6:	89a0      	ldrh	r0, [r4, #12]
 80020c8:	4307      	orrs	r7, r0
 80020ca:	81a7      	strh	r7, [r4, #12]
 80020cc:	e7cb      	b.n	8002066 <__smakebuf_r+0x1a>
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	08001e39 	.word	0x08001e39

080020d4 <memchr>:
 80020d4:	b2c9      	uxtb	r1, r1
 80020d6:	1882      	adds	r2, r0, r2
 80020d8:	4290      	cmp	r0, r2
 80020da:	d101      	bne.n	80020e0 <memchr+0xc>
 80020dc:	2000      	movs	r0, #0
 80020de:	4770      	bx	lr
 80020e0:	7803      	ldrb	r3, [r0, #0]
 80020e2:	428b      	cmp	r3, r1
 80020e4:	d0fb      	beq.n	80020de <memchr+0xa>
 80020e6:	3001      	adds	r0, #1
 80020e8:	e7f6      	b.n	80020d8 <memchr+0x4>
	...

080020ec <__malloc_lock>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4802      	ldr	r0, [pc, #8]	; (80020f8 <__malloc_lock+0xc>)
 80020f0:	f7ff ff81 	bl	8001ff6 <__retarget_lock_acquire_recursive>
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	2000009c 	.word	0x2000009c

080020fc <__malloc_unlock>:
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4802      	ldr	r0, [pc, #8]	; (8002108 <__malloc_unlock+0xc>)
 8002100:	f7ff ff7a 	bl	8001ff8 <__retarget_lock_release_recursive>
 8002104:	bd10      	pop	{r4, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	2000009c 	.word	0x2000009c

0800210c <_raise_r>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	0004      	movs	r4, r0
 8002110:	000d      	movs	r5, r1
 8002112:	291f      	cmp	r1, #31
 8002114:	d904      	bls.n	8002120 <_raise_r+0x14>
 8002116:	2316      	movs	r3, #22
 8002118:	6003      	str	r3, [r0, #0]
 800211a:	2001      	movs	r0, #1
 800211c:	4240      	negs	r0, r0
 800211e:	bd70      	pop	{r4, r5, r6, pc}
 8002120:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <_raise_r+0x24>
 8002126:	008a      	lsls	r2, r1, #2
 8002128:	189b      	adds	r3, r3, r2
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2a00      	cmp	r2, #0
 800212e:	d108      	bne.n	8002142 <_raise_r+0x36>
 8002130:	0020      	movs	r0, r4
 8002132:	f000 f831 	bl	8002198 <_getpid_r>
 8002136:	002a      	movs	r2, r5
 8002138:	0001      	movs	r1, r0
 800213a:	0020      	movs	r0, r4
 800213c:	f000 f81a 	bl	8002174 <_kill_r>
 8002140:	e7ed      	b.n	800211e <_raise_r+0x12>
 8002142:	2000      	movs	r0, #0
 8002144:	2a01      	cmp	r2, #1
 8002146:	d0ea      	beq.n	800211e <_raise_r+0x12>
 8002148:	1c51      	adds	r1, r2, #1
 800214a:	d103      	bne.n	8002154 <_raise_r+0x48>
 800214c:	2316      	movs	r3, #22
 800214e:	3001      	adds	r0, #1
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	e7e4      	b.n	800211e <_raise_r+0x12>
 8002154:	2400      	movs	r4, #0
 8002156:	0028      	movs	r0, r5
 8002158:	601c      	str	r4, [r3, #0]
 800215a:	4790      	blx	r2
 800215c:	0020      	movs	r0, r4
 800215e:	e7de      	b.n	800211e <_raise_r+0x12>

08002160 <raise>:
 8002160:	b510      	push	{r4, lr}
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <raise+0x10>)
 8002164:	0001      	movs	r1, r0
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f7ff ffd0 	bl	800210c <_raise_r>
 800216c:	bd10      	pop	{r4, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	2000000c 	.word	0x2000000c

08002174 <_kill_r>:
 8002174:	2300      	movs	r3, #0
 8002176:	b570      	push	{r4, r5, r6, lr}
 8002178:	4d06      	ldr	r5, [pc, #24]	; (8002194 <_kill_r+0x20>)
 800217a:	0004      	movs	r4, r0
 800217c:	0008      	movs	r0, r1
 800217e:	0011      	movs	r1, r2
 8002180:	602b      	str	r3, [r5, #0]
 8002182:	f7fe f918 	bl	80003b6 <_kill>
 8002186:	1c43      	adds	r3, r0, #1
 8002188:	d103      	bne.n	8002192 <_kill_r+0x1e>
 800218a:	682b      	ldr	r3, [r5, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d000      	beq.n	8002192 <_kill_r+0x1e>
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	200000a0 	.word	0x200000a0

08002198 <_getpid_r>:
 8002198:	b510      	push	{r4, lr}
 800219a:	f7fe f906 	bl	80003aa <_getpid>
 800219e:	bd10      	pop	{r4, pc}

080021a0 <__sread>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	000c      	movs	r4, r1
 80021a4:	250e      	movs	r5, #14
 80021a6:	5f49      	ldrsh	r1, [r1, r5]
 80021a8:	f000 f8a4 	bl	80022f4 <_read_r>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	db03      	blt.n	80021b8 <__sread+0x18>
 80021b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021b2:	181b      	adds	r3, r3, r0
 80021b4:	6563      	str	r3, [r4, #84]	; 0x54
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	4a02      	ldr	r2, [pc, #8]	; (80021c4 <__sread+0x24>)
 80021bc:	4013      	ands	r3, r2
 80021be:	81a3      	strh	r3, [r4, #12]
 80021c0:	e7f9      	b.n	80021b6 <__sread+0x16>
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	ffffefff 	.word	0xffffefff

080021c8 <__swrite>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	001f      	movs	r7, r3
 80021cc:	898b      	ldrh	r3, [r1, #12]
 80021ce:	0005      	movs	r5, r0
 80021d0:	000c      	movs	r4, r1
 80021d2:	0016      	movs	r6, r2
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	d505      	bpl.n	80021e4 <__swrite+0x1c>
 80021d8:	230e      	movs	r3, #14
 80021da:	5ec9      	ldrsh	r1, [r1, r3]
 80021dc:	2200      	movs	r2, #0
 80021de:	2302      	movs	r3, #2
 80021e0:	f000 f874 	bl	80022cc <_lseek_r>
 80021e4:	89a3      	ldrh	r3, [r4, #12]
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <__swrite+0x34>)
 80021e8:	0028      	movs	r0, r5
 80021ea:	4013      	ands	r3, r2
 80021ec:	81a3      	strh	r3, [r4, #12]
 80021ee:	0032      	movs	r2, r6
 80021f0:	230e      	movs	r3, #14
 80021f2:	5ee1      	ldrsh	r1, [r4, r3]
 80021f4:	003b      	movs	r3, r7
 80021f6:	f000 f81f 	bl	8002238 <_write_r>
 80021fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fc:	ffffefff 	.word	0xffffefff

08002200 <__sseek>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	000c      	movs	r4, r1
 8002204:	250e      	movs	r5, #14
 8002206:	5f49      	ldrsh	r1, [r1, r5]
 8002208:	f000 f860 	bl	80022cc <_lseek_r>
 800220c:	89a3      	ldrh	r3, [r4, #12]
 800220e:	1c42      	adds	r2, r0, #1
 8002210:	d103      	bne.n	800221a <__sseek+0x1a>
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <__sseek+0x28>)
 8002214:	4013      	ands	r3, r2
 8002216:	81a3      	strh	r3, [r4, #12]
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	0152      	lsls	r2, r2, #5
 800221e:	4313      	orrs	r3, r2
 8002220:	81a3      	strh	r3, [r4, #12]
 8002222:	6560      	str	r0, [r4, #84]	; 0x54
 8002224:	e7f8      	b.n	8002218 <__sseek+0x18>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	ffffefff 	.word	0xffffefff

0800222c <__sclose>:
 800222c:	b510      	push	{r4, lr}
 800222e:	230e      	movs	r3, #14
 8002230:	5ec9      	ldrsh	r1, [r1, r3]
 8002232:	f000 f815 	bl	8002260 <_close_r>
 8002236:	bd10      	pop	{r4, pc}

08002238 <_write_r>:
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	0004      	movs	r4, r0
 800223c:	0008      	movs	r0, r1
 800223e:	0011      	movs	r1, r2
 8002240:	001a      	movs	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	4d05      	ldr	r5, [pc, #20]	; (800225c <_write_r+0x24>)
 8002246:	602b      	str	r3, [r5, #0]
 8002248:	f7fe f8ee 	bl	8000428 <_write>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d103      	bne.n	8002258 <_write_r+0x20>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d000      	beq.n	8002258 <_write_r+0x20>
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	200000a0 	.word	0x200000a0

08002260 <_close_r>:
 8002260:	2300      	movs	r3, #0
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	4d06      	ldr	r5, [pc, #24]	; (8002280 <_close_r+0x20>)
 8002266:	0004      	movs	r4, r0
 8002268:	0008      	movs	r0, r1
 800226a:	602b      	str	r3, [r5, #0]
 800226c:	f7fe f8f8 	bl	8000460 <_close>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d103      	bne.n	800227c <_close_r+0x1c>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d000      	beq.n	800227c <_close_r+0x1c>
 800227a:	6023      	str	r3, [r4, #0]
 800227c:	bd70      	pop	{r4, r5, r6, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	200000a0 	.word	0x200000a0

08002284 <_fstat_r>:
 8002284:	2300      	movs	r3, #0
 8002286:	b570      	push	{r4, r5, r6, lr}
 8002288:	4d06      	ldr	r5, [pc, #24]	; (80022a4 <_fstat_r+0x20>)
 800228a:	0004      	movs	r4, r0
 800228c:	0008      	movs	r0, r1
 800228e:	0011      	movs	r1, r2
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	f7fe f8ef 	bl	8000474 <_fstat>
 8002296:	1c43      	adds	r3, r0, #1
 8002298:	d103      	bne.n	80022a2 <_fstat_r+0x1e>
 800229a:	682b      	ldr	r3, [r5, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d000      	beq.n	80022a2 <_fstat_r+0x1e>
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	200000a0 	.word	0x200000a0

080022a8 <_isatty_r>:
 80022a8:	2300      	movs	r3, #0
 80022aa:	b570      	push	{r4, r5, r6, lr}
 80022ac:	4d06      	ldr	r5, [pc, #24]	; (80022c8 <_isatty_r+0x20>)
 80022ae:	0004      	movs	r4, r0
 80022b0:	0008      	movs	r0, r1
 80022b2:	602b      	str	r3, [r5, #0]
 80022b4:	f7fe f8ec 	bl	8000490 <_isatty>
 80022b8:	1c43      	adds	r3, r0, #1
 80022ba:	d103      	bne.n	80022c4 <_isatty_r+0x1c>
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d000      	beq.n	80022c4 <_isatty_r+0x1c>
 80022c2:	6023      	str	r3, [r4, #0]
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	200000a0 	.word	0x200000a0

080022cc <_lseek_r>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	0004      	movs	r4, r0
 80022d0:	0008      	movs	r0, r1
 80022d2:	0011      	movs	r1, r2
 80022d4:	001a      	movs	r2, r3
 80022d6:	2300      	movs	r3, #0
 80022d8:	4d05      	ldr	r5, [pc, #20]	; (80022f0 <_lseek_r+0x24>)
 80022da:	602b      	str	r3, [r5, #0]
 80022dc:	f7fe f8e1 	bl	80004a2 <_lseek>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d103      	bne.n	80022ec <_lseek_r+0x20>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d000      	beq.n	80022ec <_lseek_r+0x20>
 80022ea:	6023      	str	r3, [r4, #0]
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	200000a0 	.word	0x200000a0

080022f4 <_read_r>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0004      	movs	r4, r0
 80022f8:	0008      	movs	r0, r1
 80022fa:	0011      	movs	r1, r2
 80022fc:	001a      	movs	r2, r3
 80022fe:	2300      	movs	r3, #0
 8002300:	4d05      	ldr	r5, [pc, #20]	; (8002318 <_read_r+0x24>)
 8002302:	602b      	str	r3, [r5, #0]
 8002304:	f7fe f873 	bl	80003ee <_read>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d103      	bne.n	8002314 <_read_r+0x20>
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d000      	beq.n	8002314 <_read_r+0x20>
 8002312:	6023      	str	r3, [r4, #0]
 8002314:	bd70      	pop	{r4, r5, r6, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	200000a0 	.word	0x200000a0

0800231c <_init>:
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002322:	bc08      	pop	{r3}
 8002324:	469e      	mov	lr, r3
 8002326:	4770      	bx	lr

08002328 <_fini>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr
